@page "/clients"
@page "/clients/{id}"
@attribute [Authorize]
@using Models
@using Models.Out
@using System.Globalization
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService _localStorage

@if (ClientsList == null)
{
    <h3>Ładowanie...</h3>
}
else if (ClientsList.Count == 0)
{
    <h3>Brak klientów!</h3>
}
else
{
    <h4>Wybierz klienta: </h4>
    <label class="contact">
        <input class="contact" type="text" name="client" list="clients" @onchange="SelectedClientChanged" value="@selectedClient" />
        <datalist id="clients">
            <label>
                or select one from the list:
                <select name="clients">
                    @foreach (Client item in ClientsList)
                    {
                        <option value="@item.Name" data-id="@item.ID" />
                    }
                </select>
            </label>
        </datalist>
    </label>

    @if (client != null && Invoices != null)
    {
    <table style="width=70%">
    <col style="width=10%" />
    <col style="width=10%" />
    <col style="width=15%" />
    <col style="width=15%" />
    <col style="width=15%" />
    <tr>
        <th>Nr faktury</th>
        <th>Data wystawienia</th>
        <th>Wartość netto</th>
        <th>Wartość brutto</th>
        <th>Zapłacona?</th>
    </tr>

    @foreach (var item in InvoicesOnPage)
    {
        <tr>
            <td><a href="invoicesellDetails/@item.ID.ToString()">@item.Code</a></td>
            <td>@item.Date</td>
            <td>@item.PriceNetto.ToString("N2") zł</td>
            <td>@item.PriceBrutto.ToString("N2") zł</td>
            @if (item.IsPaid)
            {
                <td>Zapłacona</td>
            }
            else
            {
                <td>Niezapłacona</td>
            }
        </tr>
    }
</table>

        <nav aria-label="...">
            <ul class="pagination justify-content-center">
                @if (currentPage == 1)
                {
                    <li class="page-item disabled">
                        <a class="page-link" aria-disabled="true">Poprzednia</a>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" @onclick="@(()=>SelectedPageChanged(currentPage-1))" tabindex="-1">Poprzednia</a>
                    </li>
                }

                @if ((currentPage - 2) >= 1)
                {
                    <li class="page-item"><a class="page-link" @onclick="@(()=>SelectedPageChanged(currentPage-2))">@(currentPage - 2)</a></li>
                }

                @if ((currentPage - 1) >= 1)
                {
                    <li class="page-item"><a class="page-link" @onclick="@(()=>SelectedPageChanged(currentPage-1))">@(currentPage - 1)</a></li>
                }

                <li class="page-item active" aria-current="page">
                    <a class="page-link">@currentPage <span class="sr-only">(current)</span></a>
                </li>

                @if ((currentPage + 1) <= pagesCount)
                {
                    <li class="page-item"><a class="page-link" @onclick="@(()=>SelectedPageChanged(currentPage+1))">@(currentPage + 1)</a></li>
                }

                @if ((currentPage + 2) <= pagesCount)
                {
                    <li class="page-item"><a class="page-link" @onclick="@(()=>SelectedPageChanged(currentPage+2))">@(currentPage + 2)</a></li>
                }


                @if (currentPage == pagesCount)
                {
                    <li class="page-item disabled">
                        <a class="page-link" aria-disabled="true">Następna</a>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" @onclick="@(()=>SelectedPageChanged(currentPage+1))" tabindex="-1">Następna</a>
                    </li>
                }

            </ul>
        </nav>
    }
}

@code {
    [Parameter]
    public string id { get; set; }
    private List<Client> ClientsList { get; set; }
    private string selectedClient { get; set; }
    private Client client { get; set; }
    private List<InvoiceSell> Invoices { get; set; } = new List<InvoiceSell>();
    private List<InvoiceSell> InvoicesOnPage { get; set; } = new List<InvoiceSell>();
    const string _URL = "https://localhost:5001/api/";
    private int pagesCount { get; set; }
    private int currentPage { get; set; } = 1;
    private int itemsPerPage { get; set; } = 5;

    protected override async Task OnInitializedAsync()
    {
        ClientsList = await Http.GetJsonAsync<List<Client>>(_URL + Controller.clients);
        ClientsList = ClientsList.OrderBy(c => c.Name).ToList();
        if(id != null)
        {
            client = await Http.GetJsonAsync<Client>(_URL + Controller.clients + "/" + id);
            await SelectedClientChanged(new ChangeEventArgs { Value = client.Name });
            StateHasChanged();
        }
    }

    async Task SelectedClientChanged(ChangeEventArgs e)
    {
        selectedClient = e.Value.ToString();
        if(selectedClient != "")
        {
            client = ClientsList.Where(c => c.Name == selectedClient).First();
            Invoices = await Http.GetJsonAsync<List<InvoiceSell>>(_URL + Controller.invoicesells + "/byclientid/" + client.ID.ToString());
            Invoices = Invoices.OrderByDescending(i=>i.Date).ToList();
            currentPage = 1;
            pagesCount = Invoices.Count / itemsPerPage;
            if ((Invoices.Count % itemsPerPage) != 0) pagesCount++;
            InvoicesOnPage = Invoices.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
        }
    }

    void SelectedPageChanged(int x)
    {
        currentPage = x;
        InvoicesOnPage = Invoices.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
        StateHasChanged();
    }
}
