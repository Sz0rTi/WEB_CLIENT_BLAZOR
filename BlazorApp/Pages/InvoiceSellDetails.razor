@page "/invoiceselldetails/{Id}"
@attribute [Authorize]
@using Models
@using Models.Out
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (Invoice == null)
{
    <h2>Ładowanie...</h2>
}
else
{
    <h1>@Invoice.Name</h1>
    <button type="button" @onclick="PDF">PDF</button>
    <div class="row">
        <div class="col-6">
            <table>
                <tr>
                    <td>Nazwa firmy </td>
                    <td><a href="clients/@Invoice.ClientID.ToString()">@Client.Name</a></td>
                </tr>
                <tr>
                    <td>Ulica </td>
                    <td>@Client.Street</td>
                </tr>
                <tr>
                    <td>Numer </td>
                    <td>@Client.Number</td>
                </tr>
                <tr>
                    <td>Kod pocztowy </td>
                    <td>@Client.PostCode</td>
                </tr>
                <tr>
                    <td>NIP </td>
                    <td>@Client.NIP</td>
                </tr>
            </table>
        </div>
        <div class="col-6">
            <table>
                <tr>
                    <td>Data wystawienia </td>
                    <td>@Invoice.Date</td>
                </tr>
                <tr>
                    <td>Termin płatności </td>
                    <td>@Invoice.PaymentDeadline</td>
                </tr>
                <tr>
                    <td>Czy opłacona?</td>
                    @if (Invoice.IsPaid)
                    {
                        <td>Tak</td>
                    }
                    else
                    {
                        <td>Nie</td>
                    }
                </tr>
            </table>
            <br />
            @if (!Invoice.IsPaid)
            {
                <button type="button" @onclick="()=>PayInvoice(Invoice.ID)">Opłacono</button>
            }
        </div>
    </div>
    <br />
    <table width="100%">
        <col style="width:40%">
        <col style="width:5%">
        <col style="width:10%">
        <col style="width:10%">
        <col style="width:10%">
        <col style="width:5%">
        <col style="width:10%">
        <col style="width:10%">
        <tr>
            <th>Nazwa towaru</th>
            <th>Ilość</th>
            <th>J.M.</th>
            <th>Cena netto</th>
            <th>Cena brutto</th>
            <th>VAT</th>
            <th>Wartość netto</th>
            <th>Wartość brutto</th>
        </tr>
        @foreach (var item in Invoice.ProductsSell)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Amount</td>
                <td>@(Units.Where(u => u.ID == item.UnitID).First().Name)</td>
                <td>@item.PricePerItemNetto.ToString("N2")zł</td>
                <td>@item.PricePerItemBrutto.ToString("N2")zł</td>
                <td>@(TaxStages.Where(t => t.ID == item.TaxStageID).First().Stage.ToString())%</td>
                <td>@((item.PricePerItemNetto * @item.Amount).ToString("N2"))zł</td>
                <td>@((item.PricePerItemBrutto * @item.Amount).ToString("N2"))zł</td>
            </tr>
        }
        <tr>
            <td colspan="8"></td>
        </tr>
    <tr>
        <td colspan="6"></td>
        <td><b>Łącznie netto</b></td>
        <td><b>@Invoice.PriceNetto.ToString("N2") zł</b></td>
    </tr>
    <tr>
        <td colspan="6"></td>
        <td><b>Łącznie brutto</b></td>
        <td><b>@Invoice.PriceBrutto.ToString("N2") zł</b></td>
    </tr>
    </table>
    <br />
    <button type="button" class="btn btn-primary" @onclick="@( ()=>NavigationManager.NavigateTo("invoicesselllist") )">Wróć do listy</button>
}

@code {
    private InvoiceSell Invoice { get; set; }
    private Client Client { get; set; }
    private List<Unit> Units { get; set; }
    private List<TaxStage> TaxStages { get; set; }
    [Parameter]
    public string Id { get; set; }
    const string _URL = "https://localhost:5001/api/";

    protected override async Task OnInitializedAsync()
    {
        Invoice = await Http.GetJsonAsync<InvoiceSell>(_URL + Controller.invoicesells + "/" + Id);
        Client = await Http.GetJsonAsync<Client>(_URL + Controller.clients + "/" + Invoice.ClientID.ToString());
        Units = await Http.GetJsonAsync<List<Unit>>(_URL + Controller.units);
        TaxStages = await Http.GetJsonAsync<List<TaxStage>>(_URL + Controller.taxstages);
    }

    async Task<string> GetUnit(Guid id)
    {
        Unit temp = await Http.GetJsonAsync<Unit>(_URL + Controller.units + "/byproductid/" + id.ToString());
        return temp.Name;
    }

    string GetUnitName(Guid id)
    {
        foreach (Unit item in Units)
        {
            if (item.ID == id) return item.Name;
        }
        return "BŁĄD";
    }

    async void PayInvoice(Guid id)
    {
        var temp = await Http.GetJsonAsync<InvoiceSell>(_URL + Controller.invoicesells + "/payinvoice/" + id.ToString());
        if (temp != null) Invoice = temp;
        StateHasChanged();
    }

    void PDF()
    {
        var a = Http.GetJsonAsync<bool>(_URL + Controller.invoicesells + "/pdf/" + Invoice.ID.ToString());
    }
}
