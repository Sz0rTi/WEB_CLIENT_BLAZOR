@page "/invoicesbuylist"
@attribute [Authorize]
@using Models
@using Models.Out
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService _localStorage


<h3>Lista faktur zakupowych</h3>
<br />

@if (selectedMonth == null)
{
    <h2>Ładowanie strony...</h2>
}
else
{
    if (MinDate == null)
    {
        <h3>Brak faktur!</h3>
    }
    else
    {
        <div>
            Wybierz rok:
            <select style="display:inline-block;" value="@selectedYear" @onchange="SelectedYearChanged">
                @for (int i = CurrentData.Year; i >= MinDate.Year; i--)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>
        <br />
        <div>
            Wybierz miesiąc:
            <select style="display:inline-block;" value="@selectedMonth" @onchange="SelectedMonthChanged">

                @if (selectedYear == MinDate.Year && MinDate.Year != CurrentData.Year)
                {
                    for (int i = MinDate.Month; i <= 12; i++)
                    {
                        <option value="@i">@Months[i]</option>
                    }
                }
                else
                {
                    if (selectedYear == CurrentData.Year)
                    {
                        for (int i = 1; i <= CurrentData.Month; i++)
                        {
                            <option value="@i">@Months[i]</option>
                        }
                    }
                    else
                    {
                        for (int i = 1; i <= 12; i++)
                        {
                            <option value="@i">@Months[i]</option>
                        }
                    }
                }
            </select>
        </div>
            <br />
            <table border="1" width="100%">
                <col style="width:5%">
                <col style="width:50%">
                <col style="width:15%">
                <col style="width:15%">
                <col style="width:15%">
                <tr>
                    <th>L.p.</th>
                    <th>Nazwa</th>
                    <th>Data wystawienia</th>
                    <th>Wartość netto</th>
                    <th>Opłacona?</th>
                </tr>
                @if (Invoices.Count != 0)
                {
                    for (int i = 1; i <= Invoices.Count; i++)
                    {
                        <tr>
                            <td>@i.</td>
                            <td><a href="@Details(Invoices[i - 1].ID)">@Invoices[i - 1].Name</a></td>
                            <td>@Invoices[i - 1].Date</td>
                            <td>@Invoices[i - 1].PriceNetto.ToString("N2")zł</td>
                            <td>
                                @if (Invoices[i - 1].IsPaid)
                                {
                                    <p>Zapłacona</p>
                                }
                                else
                                {
                                    <p>Niezapłacona</p>
                                }
                            </td>
                        </tr>
                    }
                }

            </table>
            }
            <p>Wybrany index roku: @selectedYear.ToString()</p>
            <p>Wybrany index miesiąca: @selectedMonth.ToString()</p>
            }



            @code {

    private DateTime CurrentData { get; set; }
        private InvoicesDate MinDate { get; set; }
        const string _URL = "https://localhost:5001/api/";
        private int selectedYear { get; set; }
        private int selectedMonth { get; set; }
        private InvoiceBuy selectedInvoice { get; set; }
        private Dictionary<int, string> Months = new Dictionary<int, string>();
        private List<InvoiceBuy> Invoices { get; set; } = new List<InvoiceBuy>();


        protected override async Task OnInitializedAsync()
        {
            CurrentData = DateTime.Now;
            try
            {
                MinDate = await Http.GetJsonAsync<InvoicesDate>(_URL + Controller.invoicebuys + "/min");
            }
            catch (Exception e)
            {
                MinDate = null;
            }
            Months.Add(1, "Styczeń");
            Months.Add(2, "Luty");
            Months.Add(3, "Marzec");
            Months.Add(4, "Kwiecień");
            Months.Add(5, "Maj");
            Months.Add(6, "Czerwiec");
            Months.Add(7, "Lipiec");
            Months.Add(8, "Sierpień");
            Months.Add(9, "Wrzesień");
            Months.Add(10, "Październik");
            Months.Add(11, "Listopad");
            Months.Add(12, "Grudzień");
            if (await _localStorage.ContainKeyAsync("selectedYearBuy"))
            {
                selectedYear = int.Parse(await _localStorage.GetItemAsync<string>("selectedYearBuy"));
                selectedMonth = int.Parse(await _localStorage.GetItemAsync<string>("selectedMonthBuy"));
            }
            else
            {
                selectedYear = CurrentData.Year;
                selectedMonth = CurrentData.Month;
            }
            SelectedYearChanged(new ChangeEventArgs { Value = selectedYear });
            SelectedMonthChanged(new ChangeEventArgs { Value = selectedMonth });
            base.StateHasChanged();
        }

        async void SelectedYearChanged(ChangeEventArgs e)
        {
            if (e.Value.ToString() != "0")
            {
                selectedYear = int.Parse(e.Value.ToString());
                await _localStorage.SetItemAsync("selectedYearBuy", selectedYear.ToString());
                if (selectedYear == MinDate.Year)
                {
                    if (int.Parse(await _localStorage.GetItemAsync<string>("selectedMonthBuy")) > MinDate.Month)
                    {
                        SelectedMonthChanged(new ChangeEventArgs { Value = await _localStorage.GetItemAsync<string>("selectedMonthBuy") });
                    }
                    else
                    {
                        SelectedMonthChanged(new ChangeEventArgs { Value = MinDate.Month });
                    }

                }
                else
                {
                    SelectedMonthChanged(new ChangeEventArgs { Value = 1 });
                }
                base.StateHasChanged();
            }
        }

        async void SelectedMonthChanged(ChangeEventArgs e)
        {
            selectedMonth = int.Parse(e.Value.ToString());
            await _localStorage.SetItemAsync("selectedMonthBuy", selectedMonth.ToString());
            var temp = await Http.PostJsonAsync<List<InvoiceBuy>>(_URL + Controller.invoicebuys + "/bydate", new InvoicesDate { Year = selectedYear, Month = selectedMonth });
            if (temp.Count == 0)
            {
                Invoices = new List<InvoiceBuy>();
            }
            else
            {
                Invoices = temp;
            }
            base.StateHasChanged();
        }

        async void SelectedInvoiceChanged()
        {
            //selectedInvoice =
        }

        string Details(Guid id)
        {
            string temp = "invoicebuydetails/" + id.ToString();
            return temp;
        }

            }
