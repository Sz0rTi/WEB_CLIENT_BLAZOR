@page "/newinvoicebuy"
@attribute [Authorize]
@using Models
@using Models.Out
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3>Nowa faktura zakupowa</h3>

@if (Units == null || Sellers == null || Categories == null)
{
    <h2>Ładowanie strony...</h2>
}
else
{
    <button class="btn btn-primary"
            @onclick="ShowResponse">
        Add New</button>

        @if (ShowResponseModal)
        {
            if (responseInvoice != null)
            {
                <!-- This is the popup to create or edit a forecast -->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Wprowadzono pomyślnie!</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                        @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current forecast -->
                            <div class="modal-body">
                                <h3> Faktura została wprowadzona pomyślnie. </h3><br />
                                <button type="button" @onclick="@(() => ToInvoice(responseInvoice.ID))">Wyświetl fakturę</button>
                                <!-- Button to save the forecast -->
                                <button class="btn btn-primary"
                                        @onclick="ClosePopup">
                                    Ok
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

        <div id="main">
            @if (seller == null)
            {
                <div id="sellerInfo">
                    <EditForm Model="@ModelSellerOut">

                        <div class="alert @StatusClass">@StatusMessage</div>

                        <DataAnnotationsValidator />


                        <b>Nazwa firmy: </b>
                        <label>
                            Wybierz firmę:<br />
                            <input type="text" name="seller" list="sellers" @onchange="SelectedSellerChanged" />
                            <datalist id="sellers">

                                <label>
                                    or select one from the list:
                                    <select name="sellers">
                                        @foreach (Seller item in Sellers)
                                        {
                                            <option value="@item.Name" data-id="@item.ID" />
                                        }
                                    </select>
                                </label>

                            </datalist>

                        </label>

                        <br /><b>Ulica: </b>
                        <InputText id="street" @bind-Value="@ModelSellerOut.Street" />
                        <ValidationMessage For="@(() => ModelSellerOut.Street)" />
                        <br /><b>Numer: </b>
                        <InputText id="number" @bind-Value="@ModelSellerOut.Number" />
                        <ValidationMessage For="@(() => ModelSellerOut.Number)" />
                        <br /><b>Kod pocztowy: </b>
                        <InputText id="postcode" @bind-Value="@ModelSellerOut.PostCode" />
                        <ValidationMessage For="@(() => ModelSellerOut.PostCode)" />
                        <br /><b>NIP: </b>
                        @*<input id=nipinput @bind="@nip" />*@
                        <InputText id="nipIT" @bind-Value="@ModelSellerOut.NIP" />
                        <ValidationMessage For="@(() => ModelSellerOut.NIP)" />
                        <button class="btn btn-primary" style="text-align: right" type="submit" @onclick="SearchByNip">Click me</button>

                    </EditForm>
                </div>

            }
            else
            {
                <div id="sellerInfo">
                    <EditForm Model="@ModelSellerOut">

                        <div class="alert @StatusClass">@StatusMessage</div>

                        <DataAnnotationsValidator />


                        <b>Nazwa firmy: </b>
                        <label>
                            Wybierz firmę:<br />
                            <input type="text" name="seller" list="sellers" @onchange="SelectedSellerChanged" value="@ModelSellerOut.Name" />
                            <datalist id="sellers">

                                <label>
                                    or select one from the list:
                                    <select name="sellers">
                                        @foreach (Seller item in Sellers)
                                        {
                                            <option value="@item.Name" data-id="@item.ID" />
                                        }
                                    </select>
                                </label>

                            </datalist>

                        </label>

                        <br /><b>Ulica: </b>
                        <InputText id="street" @bind-Value="@ModelSellerOut.Street" />
                        <ValidationMessage For="@(() => ModelSellerOut.Street)" />
                        <br /><b>Numer: </b>
                        <InputText id="number" @bind-Value="@ModelSellerOut.Number" />
                        <ValidationMessage For="@(() => ModelSellerOut.Number)" />
                        <br /><b>Kod pocztowy: </b>
                        <InputText id="postcode" @bind-Value="@ModelSellerOut.PostCode" />
                        <ValidationMessage For="@(() => ModelSellerOut.PostCode)" />
                        <br /><b>NIP: </b>
                        @*<input id=nipinput @bind="@nip" />*@
                        <InputText id="nipIT" @bind-Value="@ModelSellerOut.NIP" />
                        <ValidationMessage For="@(() => ModelSellerOut.NIP)" />
                        <button class="btn btn-primary" type="submit" @onclick="SearchByNip">Click me</button>

                    </EditForm>
                </div>



            }

            <div id="productsDIV">
                <EditForm Model="@ModelProductBuy" OnValidSubmit="CreateInvoice">

                    <div class="alert @StatusClass">@StatusMessage</div>

                    <DataAnnotationsValidator />
                    Kategoria:<br />
                    @if (Categories.Count == 0)
                    {
                        <a href="newcategory">Dodaj kategorię</a>
                    }
                    else
                    {
                <div id="categorySelect">

                    <select name="categories" @onchange="SelectedCategoryChanged">
                        <option value="-1">-----</option>
                        @foreach (Category item in Categories)
                        {
                            <option value="@item.Name">@item.Name</option>
                        }
                    </select>

                    <button type="button" @onclick="@(()=>ShowNewCategoryModal = true)">Nowa kategoria</button>

                    @if (ShowNewCategoryModal == true)
                    {
                        <div class="modal" tabindex="-1" style="display:block;" role="dialog">
                            <div class="modal-dialog">
                                <div class="modal-content" style="background-color:darkgray;">
                                    <div class="modal-header">
                                        <h3 class="modal-title">Nowa kategoria</h3>
                                        <button type="button" class="close"
                                                @onclick="@(()=>ShowNewCategoryModal = false)">
                                            <span aria-hidden="true">X</span>
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        <form @onsubmit="CloseNewCategory">
                                            <input type="text" @bind="newCategoryName" required />
                                            <button type="submit">Dodaj</button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                    }
                    @if (Products.Count == 0)
                    {
                        <p>Nazwa produktu: </p>
                        <input type="text" @bind="selectedProduct" />
                    }
                    else
                    {
                        <div id="a">
                            <label>
                                Wybierz produkt:<br />
                                <input type="text" name="aa" list="products" @onchange="SelectedProductChanged" autocomplete="off" />
                                <datalist id="products">

                                    <label>
                                        or select one from he list:
                                        <select name="aa">
                                            @foreach (Product item in Products)
                                            {
                                                <option value="@item.Name" data-id="@item.ID" />
                                            }
                                        </select>
                                    </label>

                                </datalist>

                            </label>

                        </div>
                    }
                    <br />

                    @if (selectedProduct.Length > 5)
                    {
                        if (!Products.Any(p => p.Name == selectedProduct))
                        {
                            <br /><p>Jednostka miary:</p>
                            if (Units.Count == 0)
                            {
                                <p>Nazwa J.M: </p>
                                <input type="text" @bind="selectedUnit" />
                            }
                            else
                            {
                                <div id="b">
                                    <label>
                                        <input type="text" list="units" @bind="@selectedUnit" autocomplete="off" />
                                        <datalist id="units">

                                            <label>
                                                or select one from he list:
                                                <select>
                                                    @foreach (Unit item in Units)
                                                    {
                                                        <option value="@item.Name" data-id="@item.ID" />
                                                    }
                                                </select>
                                            </label>

                                        </datalist>

                                    </label>

                                </div>
                            }
                            <br />
                            <p>Stawka VAT:</p><br />
                            if (TaxStages.Count == 0)
                            {
                                <input type="text" @bind="selectedTaxStage" /><p>%</p>
                            }
                            else
                            {
                                <div id="c">
                                    <label>
                                        <input type="text" list="taxstages" @bind="@selectedTaxStage" autocomplete="off" />
                                        <datalist id="taxstages">

                                            <label>
                                                or select one from he list:
                                                <select>
                                                    @foreach (TaxStage item in TaxStages)
                                                    {
                                                        <option value="@item.Stage.ToString()" data-id="@item.ID" />
                                                    }
                                                </select>
                                            </label>

                                        </datalist>

                                    </label>

                                </div>
                            }
                        }
                    }


                    <br />
                    <b>Ilość: </b> <InputNumber id="amountIn" @bind-Value="@ModelProductBuy.Amount" />
                    <ValidationMessage For="@(() => ModelProductBuy.Amount)" />
                    <b> Cena netto:</b> <InputNumber id="priceNettoIn" @bind-Value="@ModelProductBuy.PricePerItemNetto" />
                    <ValidationMessage For="@(() => ModelProductBuy.PricePerItemNetto)" />

                    @*<button class="btn btn-primary" @onclick="AddProductSell">Dodaj</button>*@
                    <input type="button" @onclick="@(()=>AddProductSell())" value="Dodaj" />

                    <table width="100%">
                        <col style="width:5%">
                        <col style="width:40%">
                        <col style="width:5%">
                        <col style="width:10%">
                        <col style="width:5%">
                        <col style="width:15%">
                        <col style="width:15%">
                        <col style="width:5%" />
                        <thead>
                            <tr>
                                <th>L.p.</th>
                                <th>Nazwa</th>
                                <th>Ilość</th>
                                <th>J.M</th>
                                <th>Vat</th>
                                <th>Cena</th>
                                <th>Suma</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @for(int i=1;i<= ProductsBuy.Count;i++)
                            {
                                <tr>
                                    <th>@i.</th>
                                    <th>@ProductsOnList.Where(p => p.ID == ProductsBuy[i-1].ProductID).First().Name</th>
                                    <th>@ProductsBuy[i-1].Amount</th>
                                    @*<th>@GetUnitName(item.UnitID)</th>*@
                                    <th>@ProductsBuy[i-1].Unit</th>
                                    <th>@(TaxStages.Where(t => t.ID == ProductsBuy[i-1].TaxStageID).First().Stage.ToString())%</th>
                                    <th>@ProductsBuy[i-1].PricePerItemNetto.ToString("N2") zł</th>
                                    <th>@((ProductsBuy[i-1].PricePerItemNetto * ProductsBuy[i-1].Amount).ToString("N2")) zł</th>
                                    <th><button type="button" class="bg-warning" @onclick="@(()=>DeleteProductSell(ProductsBuy[i-1]))">Usuń</button></th>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th><b>Łącznie</b></th>
                                <th><b>@(ProductsBuy.Sum(s => s.PricePerItemNetto * s.Amount).ToString("N2")) zł</b></th>
                            </tr>
                        </tfoot>
                    </table>
                    <input type="submit" value="Stwórz" />
                </EditForm>
            </div>
            @*<button type="submit" @onclick="CreateInvoice">Stwórz</button>*@


        </div>
        }


        @code {
            private string StatusMessage;
            private string StatusClass;


            protected void HandleValidSubmit()
            {
                StatusClass = "alert-info";
                StatusMessage = DateTime.Now + " Handle valid submit";
            }

            protected void HandleInvalidSubmit()
            {
                StatusClass = "alert-danger";
                StatusMessage = DateTime.Now + " Handle invalid submit";
            }



            private List<Seller> Sellers { get; set; }
            private List<Unit> Units { get; set; }
            private List<Category> Categories { get; set; }
            private List<Product> Products { get; set; }
            private List<TaxStage> TaxStages { get; set; }
            private List<ProductBuyOut> ProductsBuy { get; set; }
            private List<ProductOnList> ProductsOnList { get; set; }

            private string selectedProduct { get; set; }
            private string selectedUnit { get; set; }
            private string selectedTaxStage { get; set; }
            private string nip { get; set; }// = "8211022391";
            private bool ShowResponseModal { get; set; } = false;
            private bool ShowNewCategoryModal { get; set; } = false;
            private string a { get; set; }
            private InvoiceBuy responseInvoice { get; set; }
            private string newCategoryName { get; set; }


            private Seller seller { get; set; }
            private Category category { get; set; }
            private Product product { get; set; }
            private Unit unit { get; set; }

            private SellerOut ModelSellerOut = new SellerOut();
            private ProductBuy ModelProductBuy = new ProductBuy();

            private int amount { get; set; }
            private double priceNetto { get; set; }
            private int SelectedOption { get; set; }


            const string _URL = "https://localhost:5001/api/";

            protected override async Task OnInitializedAsync()
            {
                Sellers = await Http.GetJsonAsync<List<Seller>>(_URL + Controller.Sellers);
                Units = await Http.GetJsonAsync<List<Unit>>(_URL + Controller.units);
                Categories = await Http.GetJsonAsync<List<Category>>(_URL + Controller.categories);
                TaxStages = await Http.GetJsonAsync<List<TaxStage>>(_URL + Controller.taxstages);
                seller = new Seller();
                ModelSellerOut = new SellerOut();
                Products = new List<Product>();
                ProductsBuy = new List<ProductBuyOut>();
                ProductsOnList = new List<ProductOnList>();
                a = "";
                nip = string.Empty;
                selectedProduct = string.Empty;
                selectedUnit = string.Empty;
                selectedTaxStage = "";
            }

            async Task SelectedSellerChanged(ChangeEventArgs e)
            {
                if (Sellers.Any(c => c.Name == e.Value.ToString()))
                {
                    seller = Sellers.Where(c => c.Name == e.Value.ToString()).First();
                    //Seller = Sellers.Where(c => c.Name == ModelSellerOut.Name).First();
                    nip = seller.NIP;
                    ModelSellerOut.Name = seller.Name;
                    //e.Value = Seller.Name;
                    ModelSellerOut.Street = seller.Street;
                    ModelSellerOut.City = seller.City;
                    ModelSellerOut.Number = seller.Number;
                    ModelSellerOut.PostCode = seller.PostCode;
                    ModelSellerOut.NIP = seller.NIP;
                    //this.StateHasChanged();
                }
            }

            async Task SelectedCategoryChanged(ChangeEventArgs e)
            {
                if (Categories.Any(c => c.Name == e.Value.ToString()))
                {
                    selectedProduct = string.Empty;
                    category = Categories.Where(c => c.Name == e.Value.ToString()).First();



                    Products = await Http.GetJsonAsync<List<Product>>(_URL + Controller.products + "/bycategoryid/" + category.ID.ToString());

                    //selectedProduct = string.Empty;

                    //this.StateHasChanged();
                }
            }

            async Task SelectedProductChanged(ChangeEventArgs e)
            {
                if ((string)e.Value != "" || e.Value.ToString().Length > 5)
                {
                    /*if (Products.Any(p => p.Name == e.Value.ToString()))
                    {
                        product = Products.Where(p => p.Name == e.Value.ToString()).First();
                        unit = Units.Where(u => u.ID == product.UnitID).First();*/
                    //selectedUnit = unit.Name;
                    //selectedTaxStage = TaxStages.Where(t => t.ID == product.TaxStageID).First().Stage.ToString();
                    selectedProduct = e.Value.ToString();
                    StateHasChanged();
                    //}
                }
            }

            async Task SelectedUnitChanged(ChangeEventArgs e)
            {
                if ((string)e.Value != "")
                {
                    selectedUnit = e.Value.ToString();
                }
            }

            async Task SelectedTaxStageChanged(ChangeEventArgs e)
            {
                if ((string)e.Value != "")
                {
                    //selectedTaxStage = double.Parse(e.Value.ToString().Replace("%","").Replace(",","."));
                }
            }

            async Task SearchByNip(KeyboardEventArgs e)
            {
                if (ModelSellerOut.NIP.Length > 9)
                {
                    string temp = ModelSellerOut.NIP.Replace("-", "");
                    seller = await Http.GetJsonAsync<Seller>("https://localhost:5001/api/gus/" + temp);
                    //this.StateHasChanged();
                }
            }

            async Task SearchByNip()
            {
                if (ModelSellerOut.NIP.Length > 9)
                {
                    string temp = a.Replace("-", "");
                    nip = ModelSellerOut.NIP;
                    //ModelSellerOut = new SellerOut();
                    //Seller = new Seller();
                    seller = await Http.GetJsonAsync<Seller>("https://localhost:5001/api/gus/" + nip);
                    ModelSellerOut.Name = seller.Name;
                    ModelSellerOut.Street = seller.Street;
                    ModelSellerOut.City = seller.City;
                    ModelSellerOut.Number = seller.Number;
                    ModelSellerOut.PostCode = seller.PostCode;
                    ModelSellerOut.NIP = seller.NIP;
                    //this.StateHasChanged();
                }
            }

            async Task AddProductSell()
            {
                //if(selectedProduct != string.Empty)
                {
                    if (ModelProductBuy.Amount != 0 && ModelProductBuy.PricePerItemNetto != 0)
                    {
                        ProductBuyOut temp = new ProductBuyOut();
                        if (Products.Where(p => p.Name == selectedProduct).FirstOrDefault() == null)
                        {
                            ProductOut newProduct = new ProductOut();
                            newProduct.Name = selectedProduct;
                            newProduct.Amount = 0;
                            newProduct.CategoryID = (Guid)category.ID;
                            Unit unit = new Unit();
                            if (selectedUnit != "")
                            {
                                unit = Units.Where(u => u.Name == selectedUnit).FirstOrDefault();
                                if (unit == null)
                                {
                                    unit = await Http.PostJsonAsync<Unit>(_URL + Controller.units, new UnitOut { Name = selectedUnit });
                                    newProduct.UnitID = unit.ID;
                                    temp.UnitID = unit.ID;
                                    Units.Add(unit);
                                }
                                else
                                {
                                    newProduct.UnitID = unit.ID;
                                }
                            }
                            newProduct.PriceNetto = 0;
                            newProduct.Description = "";
                            TaxStage tax = new TaxStage();
                            if (selectedTaxStage != "")
                            {
                                TaxStage taxStage = TaxStages.Where(u => u.Stage == double.Parse(selectedTaxStage.ToString().Replace("%", "").Replace(",", "."))).FirstOrDefault();
                                if (taxStage == null)
                                {
                                    tax = await Http.PostJsonAsync<TaxStage>(_URL + Controller.taxstages, new TaxStageOut { Stage = double.Parse(selectedTaxStage.ToString().Replace("%", "").Replace(",", ".")) });
                                    newProduct.TaxStageID = tax.ID;
                                    TaxStages.Add(tax);
                                }
                                else
                                {
                                    newProduct.TaxStageID = taxStage.ID;
                                }
                            }
                            Product tempProduct = await Http.PostJsonAsync<Product>(_URL + Controller.products, newProduct);
                            temp.ProductID = tempProduct.ID;
                            temp.Name = selectedProduct;
                            temp.TaxStageID = tempProduct.TaxStageID;
                            temp.UnitID = tempProduct.UnitID;
                            temp.Amount = (int)ModelProductBuy.Amount;
                            temp.Unit = GetUnitName(newProduct.UnitID);
                            temp.PricePerItemNetto = (double)ModelProductBuy.PricePerItemNetto;
                            temp.PricePerItemBrutto = tempProduct.PriceNetto * ((tax.Stage + 100.0) / 100.0);
                            product = tempProduct;
                        }
                        else
                        {
                            product = Products.Where(p => p.Name == selectedProduct).First();
                            unit = Units.Where(u => u.ID == product.UnitID).First();

                            temp.ProductID = product.ID;
                            temp.Name = product.Name;
                            temp.Amount = ModelProductBuy.Amount;
                            temp.PricePerItemNetto = ModelProductBuy.PricePerItemNetto;
                            temp.PricePerItemBrutto = ModelProductBuy.PricePerItemNetto * ((TaxStages.Where(t=>t.ID==product.TaxStageID).First().Stage + 100.0) / 100.0);
                            temp.TaxStageID = product.TaxStageID;
                            temp.UnitID = product.UnitID;
                            temp.Unit = GetUnitName(temp.UnitID);
                        }
                        ProductsOnList.Add(new ProductOnList { ID = product.ID, Name = product.Name });
                        ProductsBuy.Add(temp);
                        selectedProduct = "";
                        selectedTaxStage = "";
                        selectedUnit = "";
                        ModelProductBuy.Amount = 0;
                        ModelProductBuy.PricePerItemNetto = double.Parse("0");
                    }
                }
            }

            void DeleteProductSell(ProductBuyOut x)
            {
                ProductsOnList.Remove(ProductsOnList.Where(p => p.ID == x.ProductID).First());
                ProductsBuy.Remove(x);
                //this.StateHasChanged();
            }

            async Task<string> GetUnit(Guid id)
            {
                Unit temp = await Http.GetJsonAsync<Unit>(_URL + Controller.units + "/byproductid/" + id.ToString());
                return temp.Name;
            }

            string GetUnitName(Guid id)
            {
                return Units.Where(u => u.ID == id).First().Name;
                /*foreach (Unit item in Units)
                {
                    if (item.ID == id) return item.Name;
                }
                return "BŁĄD";*/
            }

            async Task CreateInvoice()
            {
                if (ModelSellerOut != null && ModelProductBuy != null && ProductsBuy.Count > 0 && ProductsOnList.Count > 0)
                {
                    InvoiceBuyOut temp = new InvoiceBuyOut();
                    if (Sellers.Any(c => c.NIP == ModelSellerOut.NIP)) temp.SellerID = Sellers.Where(c => c.NIP == ModelSellerOut.NIP).First().ID;
                    else
                    {
                        Seller SellerTemp = await Http.PostJsonAsync<Seller>(_URL + Controller.Sellers, ModelSellerOut);
                        temp.SellerID = SellerTemp.ID;
                    }
                    temp.IsPaid = false;
                    temp.PaymentDeadline = DateTime.Now;
                    temp.PriceNetto = ProductsBuy.Sum(p => p.Amount * p.PricePerItemNetto);
                    temp.PriceBrutto = ProductsBuy.Sum(p => p.Amount * p.PricePerItemBrutto);
                    temp.ProductsBuy = ProductsBuy;

                    responseInvoice = await Http.PostJsonAsync<InvoiceBuy>(_URL + Controller.invoicebuys, temp);
                    ShowResponseModal = true;
                }
            }

            void AddCategory()
            {
                string name = "test";
                var parameters = new ModalParameters();
                parameters.Add("Nazwa", name);
            }
            string aaa;

            void ShowResponse()
            {
                // Open the Popup
                ShowResponseModal = true;
            }

            void NewCategory()
            {
                ShowNewCategoryModal = true;
            }

            async void CloseNewCategory()
            {
                if(newCategoryName != null && newCategoryName != "" && !(Categories.Any(c=>c.Name == newCategoryName)))
                {
                    var response = await Http.PostJsonAsync<Category>(_URL + Controller.categories, new CategoryOut { Name = newCategoryName });
                    Categories.Add(response);
                    ShowNewCategoryModal = false;
                    StateHasChanged();
                }
            }

            void ClosePopup()
            {
                ShowResponseModal = false;
                NavigationManager.NavigateTo("/newinvoicebuy", true);
            }

            void ToInvoice(Guid id)
            {
                ShowResponseModal = false;
                NavigationManager.NavigateTo("/invoicebuydetails/"+id.ToString());
            }


            public enum Controller
            {
                categories,
                Sellers,
                products,
                invoicesells,
                invoicebuys,
                units,
                taxstages
            }

        }
