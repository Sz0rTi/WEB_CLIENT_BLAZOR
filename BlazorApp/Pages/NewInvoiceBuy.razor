@page "/newinvoicebuy"
@attribute [Authorize]
@using Models
@using Models.Out
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3>Nowa faktura zakupowa</h3>

@if (Units == null || Sellers == null || Categories == null)
{
    <h2>Ładowanie strony...</h2>
}
else
{
    <div>
        <h3 style="display:inline-block;">Numer faktury: </h3>
        <input type="text" style="display:inline-block;" @bind="code" required />
    </div>

    @if (ShowResponseModal)
    {
        if (responseInvoice != null)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Wprowadzono pomyślnie!</h3>
                            <button type="button" class="close"
                                    @onclick="ClosePopup">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <h3> Faktura została wprowadzona pomyślnie. </h3><br />
                            <button type="button" @onclick="@(() => ToInvoice(responseInvoice.ID))">Wyświetl fakturę</button>
                            <button class="btn btn-primary"
                                    @onclick="ClosePopup">
                                Ok
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }

    @if (ShowNewProduct)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content" style="background-color:#d4edda;border-color:#c3e6cb;border-width:medium;">
                    <div class="modal-header">
                        <h3 class="modal-title">Nowa pozycja</h3>
                        <button type="button" class="close"
                                @onclick="@(() => ShowNewProduct = false)">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div>
                            Kategoria:
                            @if (Categories.Count == 0)
                            {
                                <button type="button" @onclick="@(() => ShowNewCategoryModal = true)" style="display:block">Nowa kategoria</button>
                            }
                            else
                            {
                                <div id="categorySelect">

                                    <select name="categories" @onchange="SelectedCategoryChanged" style="display:block">
                                        <option value="-1">-----</option>
                                        @foreach (Category item in Categories)
                                        {
                                            <option value="@item.Name">@item.Name</option>
                                        }
                                    </select>

                                    <button type="button" @onclick="@(() => { ShowNewCategoryModal = true; ShowNewProduct = false; })">Nowa kategoria</button>
                                    <br /><br />

                                </div>
                            }
                        </div>
                        <table border="1" style="width:100%">
                            <col style="width:30%">
                            <col style="width:70%">
                            <tr>
                                <td>Nazwa produktu</td>
                                <td>
                                    @if (Products.Count == 0)
                                    {
                                        <input class="contact" type="text" @bind="selectedProduct" style="width:100%" />
                                    }
                                    else
                                    {
                                        <div id="a">
                                            <label class="contact">
                                                <input class="contact" type="text" name="aa" style="width:100%" list="products" @bind="selectedProduct" autocomplete="off" />
                                                <datalist id="products">
                                                    <label>
                                                        or select one from he list:
                                                        <select name="aa">
                                                            @foreach (Product item in Products)
                                                            {
                                                                <option value="@item.Name" data-id="@item.ID" />
                                                            }
                                                        </select>
                                                    </label>
                                                </datalist>
                                            </label>
                                        </div>
                                    }
                                </td>
                            </tr>
                            @if (selectedProduct.Length > 3)
                            {
                                @if (!Products.Any(p => p.Name == selectedProduct))
                                {
                                    <tr>
                                        <td>Jednostka miary</td>
                                        <td>
                                            @if (Units.Count == 0)
                                            {
                                                <input class="contact" type="text" @bind="selectedUnit" style="width:100%" />
                                            }
                                            else
                                            {
                                                <div id="b">
                                                    <label class="contact">
                                                        <input class="contact" type="text" list="units" @bind="@selectedUnit" autocomplete="off" style="width:100%" />
                                                        <datalist id="units">

                                                            <label style="width:100%">
                                                                or select one from he list:
                                                                <select style="width:100%">
                                                                    @foreach (Unit item in Units)
                                                                    {
                                                                        <option value="@item.Name" data-id="@item.ID" />
                                                                    }
                                                                </select>
                                                            </label>

                                                        </datalist>

                                                    </label>

                                                </div>
                                            }
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>Stawka VAT w %</td>
                                        <td>
                                            @if (TaxStages.Count == 0)
                                            {
                                                <input class="contact" type="text" @bind="selectedTaxStage" style="width:100%" /><b>%</b>
                                            }
                                            else
                                            {
                                                <div id="c">
                                                    <label class="contact">
                                                        <input class="contact" type="text" list="taxstages" @bind="@selectedTaxStage" autocomplete="off" style="width:100%" />
                                                        <datalist id="taxstages">

                                                            <label>
                                                                or select one from he list:
                                                                <select>
                                                                    @foreach (TaxStage item in TaxStages)
                                                                    {
                                                                        <option value="@item.Stage.ToString()" data-id="@item.ID" />
                                                                    }
                                                                </select>
                                                            </label>

                                                        </datalist>

                                                    </label>

                                                </div>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                            <tr>
                                <td>Ilość</td>
                                <td><input class="contact" type="number" @bind="ModelProductBuy.Amount" /></td>
                            </tr>
                            <tr>
                                <td>Cena netto</td>
                                <td><input class="contact" type="number" @bind="ModelProductBuy.PricePerItemNetto" /></td>
                            </tr>
                        </table>
                        <br />
                        <input type="button" @onclick="@(() => AddProductSell())" value="Dodaj" />
                    </div>
                </div>
            </div>
        </div>

    }

    @if (ShowNewCategoryModal == true)
    {
        <div class="modal" tabindex="-1" style="display:block;" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content" style="background-color:#e2e3e5;border-color:#d6d8db;border-width:medium;margin-top:100px;">
                    <div class="modal-header">
                        <h3 class="modal-title">Nowa kategoria</h3>
                        <button type="button" class="close"
                                @onclick="@(() => { ShowNewCategoryModal = false; ShowNewProduct = true; })">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form @onsubmit="CloseNewCategory">
                            <input type="text" @bind="newCategoryName" required />
                            <button type="submit">Dodaj</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }

    <div id="main">
        <div id="clientInfo" class="row">
            <div class="col-6">
                <table class="contact">
                    <col style="width:auto;">
                    <col style="width:auto">
                    <tr class="contact">
                        <td class="contact">Nazwa firmy: </td>
                        <td class="contact">
                            @if (Sellers.Count == 0)
                            {
                                <input class="contact" type="text" @bind-value="seller.Name" @bind-value:event="SelectedClientChanged" required />
                            }
                            else
                            {
                                <label class="contact">
                                    <input class="contact" type="text" name="seller" list="sellers" @onchange="SelectedSellerChanged" value="@ModelSellerOut.Name" required />
                                    <datalist id="sellers">
                                        <label>
                                            or select one from the list:
                                            <select name="clients">
                                                @foreach (Seller item in Sellers)
                                                {
                                                    <option value="@item.Name" data-id="@item.ID" />
                                                }
                                            </select>
                                        </label>
                                    </datalist>
                                </label>
                            }
                        </td>
                    </tr>
                    <tr class="contact">
                        <td class="contact">Ulica: </td>
                        <td class="contact"><input type="text" class="contact" id="street" @bind="@ModelSellerOut.Street" required /></td>
                    </tr>
                    <tr class="contact">
                        <td class="contact">Numer: </td>
                        <td class="contact"><input type="text" class="contact" id="number" @bind="@ModelSellerOut.Number" required /></td>
                    </tr>
                    <tr class="contact">
                        <td class="contact">Kod pocztowy: </td>
                        <td class="contact"><input type="text" class="contact" id="postcode" @bind="@ModelSellerOut.PostCode" required /></td>
                    </tr>
                    <tr class="contact">
                        <td class="contact">Miejscowość: </td>
                        <td class="contact"><input type="text" class="contact" id="city" @bind="@ModelSellerOut.City" required /></td>
                    </tr>
                    <tr class="contact">
                        <td class="contact">NIP:</td>
                        <td class="contact"><input type="text" class="contact" id="nipIT" @bind="@ModelSellerOut.NIP" required /></td>
                    </tr>
                    <tr class="contact">
                        <td class="contact"></td>
                        <td class="contact" style="text-align:right;">
                            <button class="btn btn-primary" type="submit" @onclick="SearchByNip" style="font-size:10px">Szukaj po NIP</button>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="col-6">
                <table style="width:60%">
                    <col style="width:30%">
                    <col style="width:67%">
                    <tr>
                        <td>Rodzaj płatności</td>
                        <td>
                            <label class="contact">
                                <input type="text" name="pmethods" list="pmethods" @onchange="SelectedPaymentMethodChanged" value="@paymentMethod" required />
                                <datalist id="pmethods">
                                    <label>
                                        or select one from the list:
                                        <select name="pmethods">
                                            @foreach (PaymentMethod item in PaymentMethods)
                                            {
                                                <option value="@item.Name" data-id="@item.ID" />
                                            }
                                        </select>
                                    </label>
                                </datalist>
                            </label>
                        </td>
                    </tr>
                    <tr>
                        <td>Termin płatności</td>
                        <td><input style="display:inline-block" type="date" min="@DateTime.Now" @bind="paymentDeadline" required /><br /></td>
                    </tr>
                    <tr>
                        <td>Zapłacona?</td>
                        <td>
                            <select @onchange="IsPaidChanged" style="display:inline-block">
                                <option value="NIE">NIE</option>
                                <option value="TAK">TAK</option>
                            </select>
                        </td>
                    </tr>
                </table>
            </div>
        </div>

        <div id="productsDIV">
            <EditForm Model="@ModelProductBuy" OnValidSubmit="CreateInvoice">

                <div class="alert @StatusClass">@StatusMessage</div>

                <DataAnnotationsValidator />

                <button type="button" class="btn btn-success" @onclick="@(() => ShowNewProduct = true)">Nowa pozycja</button>

                <br /><br />
                <table class="table table-bordered" width="100%">
                    <col style="width:30%">
                    <col style="width:5%">
                    <col style="width:7%">
                    <col style="width:5%">
                    <col style="width:10%">
                    <col style="width:10%">
                    <col style="width:12%">
                    <col style="width:12%">
                    <col style="width:9%" />
                    <thead>
                        <tr>
                            <th>Nazwa</th>
                            <th>Ilość</th>
                            <th>J.M</th>
                            <th>Vat</th>
                            <th>Cena netto</th>
                            <th>Cena brutto</th>
                            <th>Wartość netto</th>
                            <th>Wartość brutto</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ProductsBuy)
                        {
                            <tr>
                                <th>@ProductsOnList.Where(p => p.ID == item.ProductID).First().Name</th>
                                <th>@item.Amount</th>
                                <th>@item.Unit</th>
                                <th>@(TaxStages.Where(t => t.ID == item.TaxStageID).First().Stage)%</th>
                                <th>@item.PricePerItemNetto.ToString("N2") zł</th>
                                <th>@item.PricePerItemBrutto.ToString("N2") zł</th>
                                <th>@((item.PricePerItemNetto * item.Amount).ToString("N2")) zł</th>
                                <th>@((item.PricePerItemBrutto * item.Amount).ToString("N2")) zł</th>
                                <th><button type="button" class="btn btn-danger" style="margin:auto;display:block;" @onclick="@(() => DeleteProductSell(item))">Usuń</button></th>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th><b>Łącznie netto</b></th>
                            <th><b>@(ProductsBuy.Sum(s => s.PricePerItemNetto * s.Amount).ToString("N2")) zł</b></th>
                        </tr>
                        <tr>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th><b>Łącznie brutto</b></th>
                            <th><b>@(ProductsBuy.Sum(s => s.PricePerItemBrutto * s.Amount).ToString("N2")) zł</b></th>
                        </tr>
                    </tfoot>
                </table>
                <input type="submit" value="Stwórz" style="float:right" />
            </EditForm>
        </div>

    </div>
}


@code {
    private string StatusMessage;
    private string StatusClass;


    protected void HandleValidSubmit()
    {
        StatusClass = "alert-info";
        StatusMessage = DateTime.Now + " Handle valid submit";
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        StatusMessage = DateTime.Now + " Handle invalid submit";
    }



    private List<Seller> Sellers { get; set; }
    private List<Unit> Units { get; set; }
    private List<Category> Categories { get; set; }
    private List<Product> Products { get; set; }
    private List<TaxStage> TaxStages { get; set; }
    private List<ProductBuyOut> ProductsBuy { get; set; }
    private List<ProductOnList> ProductsOnList { get; set; }
    private List<PaymentMethod> PaymentMethods { get; set; }

    private string selectedProduct { get; set; }
    private string selectedUnit { get; set; }
    private string selectedTaxStage { get; set; }
    private string nip { get; set; }
    private bool ShowResponseModal { get; set; } = false;
    private bool ShowNewProduct { get; set; } = false;
    private bool ShowNewCategoryModal { get; set; } = false;
    private bool ShowNewPaymentMethodModal { get; set; } = false;
    private string IsPaid { get; set; }
    private string a { get; set; }
    private InvoiceBuy responseInvoice { get; set; }
    private string newCategoryName { get; set; }
    private string code { get; set; }
    private string paymentMethod { get; set; }


    private Seller seller { get; set; }
    private Category category { get; set; }
    private Product product { get; set; }
    private Unit unit { get; set; }
    private DateTime paymentDeadline { get; set; } = DateTime.Now;

    private SellerOut ModelSellerOut = new SellerOut();
    private ProductBuy ModelProductBuy = new ProductBuy();

    private int amount { get; set; }
    private double priceNetto { get; set; }
    private int SelectedOption { get; set; }


    const string _URL = "https://localhost:5001/api/";

    protected override async Task OnInitializedAsync()
    {
        Sellers = await Http.GetJsonAsync<List<Seller>>(_URL + Controller.Sellers);
        Units = await Http.GetJsonAsync<List<Unit>>(_URL + Controller.units);
        Categories = await Http.GetJsonAsync<List<Category>>(_URL + Controller.categories);
        TaxStages = await Http.GetJsonAsync<List<TaxStage>>(_URL + Controller.taxstages);
        PaymentMethods = await Http.GetJsonAsync<List<PaymentMethod>>(_URL + Controller.payment);
        seller = new Seller();
        ModelSellerOut = new SellerOut();
        Products = new List<Product>();
        ProductsBuy = new List<ProductBuyOut>();
        ProductsOnList = new List<ProductOnList>();
        a = "";
        nip = string.Empty;
        selectedProduct = string.Empty;
        selectedUnit = string.Empty;
        selectedTaxStage = "";
        IsPaid = "NIE";
    }

    async Task SelectedSellerChanged(ChangeEventArgs e)
    {
        if (Sellers.Any(c => c.Name == e.Value.ToString()))
        {
            seller = Sellers.Where(c => c.Name == e.Value.ToString()).First();
            nip = seller.NIP;
            ModelSellerOut.Name = seller.Name;
            ModelSellerOut.Street = seller.Street;
            ModelSellerOut.City = seller.City;
            ModelSellerOut.Number = seller.Number;
            ModelSellerOut.PostCode = seller.PostCode;
            ModelSellerOut.NIP = seller.NIP;
        }
    }

    async Task SelectedCategoryChanged(ChangeEventArgs e)
    {
        if (Categories.Any(c => c.Name == e.Value.ToString()))
        {
            selectedProduct = string.Empty;
            category = Categories.Where(c => c.Name == e.Value.ToString()).First();
            Products = await Http.GetJsonAsync<List<Product>>(_URL + Controller.products + "/bycategoryid/" + category.ID.ToString());
        }
    }

    async Task SelectedProductChanged(ChangeEventArgs e)
    {
        //if ((string)e.Value != "" || e.Value.ToString().Length > 4)
        //{
        selectedProduct = e.Value.ToString();
        StateHasChanged();
        //}
    }

    async Task SelectedUnitChanged(ChangeEventArgs e)
    {
        if ((string)e.Value != "")
        {
            selectedUnit = e.Value.ToString();
        }
    }

    async Task SelectedTaxStageChanged(ChangeEventArgs e)
    {
        if ((string)e.Value != "")
        {
            //selectedTaxStage = double.Parse(e.Value.ToString().Replace("%","").Replace(",","."));
        }
    }

    async Task SearchByNip(KeyboardEventArgs e)
    {
        if (ModelSellerOut.NIP.Length > 9)
        {
            string temp = ModelSellerOut.NIP.Replace("-", "");
            seller = await Http.GetJsonAsync<Seller>("https://localhost:5001/api/gus/" + temp);
        }
    }

    async Task SearchByNip()
    {
        if (ModelSellerOut.NIP.Length > 9)
        {
            string temp = a.Replace("-", "");
            nip = ModelSellerOut.NIP;
            seller = await Http.GetJsonAsync<Seller>("https://localhost:5001/api/gus/" + nip);
            ModelSellerOut.Name = seller.Name;
            ModelSellerOut.Street = seller.Street;
            ModelSellerOut.City = seller.City;
            ModelSellerOut.Number = seller.Number;
            ModelSellerOut.PostCode = seller.PostCode;
            ModelSellerOut.NIP = seller.NIP;
            //this.StateHasChanged();
        }
    }

    async Task AddProductSell()
    {
        {
            ShowNewProduct = false;
            if (ModelProductBuy.Amount != 0 && ModelProductBuy.PricePerItemNetto != 0)
            {
                ProductBuyOut temp = new ProductBuyOut();
                if (Products.Where(p => p.Name == selectedProduct).FirstOrDefault() == null)
                {
                    ProductOut newProduct = new ProductOut();
                    newProduct.Name = selectedProduct;
                    newProduct.Amount = 0;
                    newProduct.CategoryID = (Guid)category.ID;
                    Unit unit = new Unit();
                    if (selectedUnit != "")
                    {
                        unit = Units.Where(u => u.Name == selectedUnit).FirstOrDefault();
                        if (unit == null)
                        {
                            unit = await Http.PostJsonAsync<Unit>(_URL + Controller.units, new UnitOut { Name = selectedUnit });
                            newProduct.UnitID = unit.ID;
                            temp.UnitID = unit.ID;
                            Units.Add(unit);
                        }
                        else
                        {
                            newProduct.UnitID = unit.ID;
                        }
                    }
                    newProduct.PriceNetto = 0;
                    newProduct.Description = "";
                    TaxStage tax = new TaxStage();
                    if (selectedTaxStage != "")
                    {
                        TaxStage taxStage = TaxStages.Where(u => u.Stage == double.Parse(selectedTaxStage.ToString().Replace("%", "").Replace(",", "."))).FirstOrDefault();
                        if (taxStage == null)
                        {
                            tax = await Http.PostJsonAsync<TaxStage>(_URL + Controller.taxstages, new TaxStageOut { Stage = double.Parse(selectedTaxStage.ToString().Replace("%", "").Replace(",", ".")) });
                            newProduct.TaxStageID = tax.ID;
                            TaxStages.Add(tax);
                        }
                        else
                        {
                            newProduct.TaxStageID = taxStage.ID;
                        }
                    }
                    Product tempProduct = await Http.PostJsonAsync<Product>(_URL + Controller.products, newProduct);
                    temp.ProductID = tempProduct.ID;
                    temp.Name = selectedProduct;
                    temp.TaxStageID = tempProduct.TaxStageID;
                    temp.UnitID = tempProduct.UnitID;
                    temp.Amount = (int)ModelProductBuy.Amount;
                    temp.Unit = GetUnitName(newProduct.UnitID);
                    temp.PricePerItemNetto = (double)ModelProductBuy.PricePerItemNetto;
                    temp.PricePerItemBrutto = temp.PricePerItemNetto * ((TaxStages.Where(t => t.ID == temp.TaxStageID).First().Stage + 100.0) / 100.0);
                    product = tempProduct;
                }
                else
                {
                    product = Products.Where(p => p.Name == selectedProduct).First();
                    unit = Units.Where(u => u.ID == product.UnitID).First();

                    temp.ProductID = product.ID;
                    temp.Name = product.Name;
                    temp.Amount = ModelProductBuy.Amount;
                    temp.PricePerItemNetto = ModelProductBuy.PricePerItemNetto;
                    temp.PricePerItemBrutto = ModelProductBuy.PricePerItemNetto * ((TaxStages.Where(t => t.ID == product.TaxStageID).First().Stage + 100.0) / 100.0);
                    temp.TaxStageID = product.TaxStageID;
                    temp.UnitID = product.UnitID;
                    temp.Unit = GetUnitName(temp.UnitID);
                }
                ProductsOnList.Add(new ProductOnList { ID = temp.ProductID, Name = product.Name });
                ProductsBuy.Add(temp);
                selectedProduct = "";
                selectedTaxStage = "";
                selectedUnit = "";
                ModelProductBuy.Amount = 0;
                ModelProductBuy.PricePerItemNetto = double.Parse("0");
                StateHasChanged();
            }
        }
    }

    void DeleteProductSell(ProductBuyOut x)
    {
        ProductsOnList.Remove(ProductsOnList.Where(p => p.ID == x.ProductID).First());
        ProductsBuy.Remove(x);
    }

    async Task<string> GetUnit(Guid id)
    {
        Unit temp = await Http.GetJsonAsync<Unit>(_URL + Controller.units + "/byproductid/" + id.ToString());
        return temp.Name;
    }

    string GetUnitName(Guid id)
    {
        return Units.Where(u => u.ID == id).First().Name;
    }

    async Task CreateInvoice()
    {
        if (ModelSellerOut != null && ModelProductBuy != null && ProductsBuy.Count > 0 && ProductsOnList.Count > 0 && code != "")
        {
            InvoiceBuyOut temp = new InvoiceBuyOut();
            if (Sellers.Any(c => c.NIP == ModelSellerOut.NIP)) temp.SellerID = Sellers.Where(c => c.NIP == ModelSellerOut.NIP).First().ID;
            else
            {
                Seller SellerTemp = await Http.PostJsonAsync<Seller>(_URL + Controller.Sellers, ModelSellerOut);
                temp.SellerID = SellerTemp.ID;
            }
            PaymentMethod payment = new PaymentMethod();
            if (paymentMethod != "")
            {
                payment = PaymentMethods.Where(u => u.Name == paymentMethod).FirstOrDefault();
                if (payment == null)
                {
                    payment = await Http.PostJsonAsync<PaymentMethod>(_URL + Controller.payment, new PaymentMethodOut { Name = paymentMethod });
                    temp.PaymentMethodID = payment.ID;
                    PaymentMethods.Add(payment);
                }
                else
                {
                    temp.PaymentMethodID = payment.ID;
                }
            }
            if (IsPaid == "TAK") temp.IsPaid = true;
            else temp.IsPaid = false;
            temp.Code = code;
            temp.PaymentDeadline = paymentDeadline.AddHours(23).AddMinutes(59);
            temp.PriceNetto = ProductsBuy.Sum(p => p.Amount * p.PricePerItemNetto);
            temp.PriceBrutto = ProductsBuy.Sum(p => p.Amount * p.PricePerItemBrutto);
            temp.ProductsBuy = ProductsBuy;

            responseInvoice = await Http.PostJsonAsync<InvoiceBuy>(_URL + Controller.invoicebuys, temp);
            ShowResponseModal = true;
        }
    }

    void AddCategory()
    {
        string name = "test";
        var parameters = new ModalParameters();
        parameters.Add("Nazwa", name);
    }
    string aaa;

    void ShowResponse()
    {
        ShowResponseModal = true;
    }

    void NewCategory()
    {
        ShowNewCategoryModal = true;
    }

    async void CloseNewCategory()
    {
        if (!string.IsNullOrEmpty(newCategoryName.Trim()) && !(Categories.Any(c => c.Name == newCategoryName.Trim())))
        {
            var response = await Http.PostJsonAsync<Category>(_URL + Controller.categories, new CategoryOut { Name = newCategoryName.Trim() });
            Categories.Add(response);
            ShowNewCategoryModal = false;
            ShowNewProduct = true;
            StateHasChanged();
        }
    }

    void ClosePopup()
    {
        ShowResponseModal = false;
        NavigationManager.NavigateTo("/newinvoicebuy", true);
    }

    void ToInvoice(Guid id)
    {
        ShowResponseModal = false;
        NavigationManager.NavigateTo("/invoicebuydetails/" + id.ToString());
    }

    async Task IsPaidChanged(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "NIE")
        {
            IsPaid = "NIE";
        }
        else
        {
            IsPaid = "TAK";
        }
    }

    async Task SelectedPaymentMethodChanged(ChangeEventArgs e)
    {
        paymentMethod = e.Value.ToString();
    }




    public enum Controller
    {
        categories,
        Sellers,
        products,
        invoicesells,
        invoicebuys,
        payment,
        units,
        taxstages
    }

}
