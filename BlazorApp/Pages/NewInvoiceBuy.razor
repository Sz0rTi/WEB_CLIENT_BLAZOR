@page "/newinvoicebuy"
@using Models
@using Models.Out
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<h3>NewInvoiceBuyModel</h3>

@if (Units == null || Sellers == null || Categories == null)
{
    <h2>Loading...</h2>
}
else
{

<div id="main">
    @if (seller == null)
    {
        <div id="sellerInfo">
            <EditForm Model="@ModelSellerOut">

                <div class="alert @StatusClass">@StatusMessage</div>

                <DataAnnotationsValidator />


                <b>Nazwa firmy: </b>
                <label>
                    Wybierz firmę:<br />
                    <input type="text" name="seller" list="sellers" @onchange="SelectedSellerChanged" />
                    <datalist id="sellers">

                        <label>
                            or select one from the list:
                            <select name="sellers">
                                @foreach (Seller item in Sellers)
                                {
                                    <option value="@item.Name" data-id="@item.ID" />
                                }
                            </select>
                        </label>

                    </datalist>

                </label>

                <br /><b>Ulica: </b>
                <InputText id="street" @bind-Value="@ModelSellerOut.Street" />
                <ValidationMessage For="@(() => ModelSellerOut.Street)" />
                <br /><b>Numer: </b>
                <InputText id="number" @bind-Value="@ModelSellerOut.Number" />
                <ValidationMessage For="@(() => ModelSellerOut.Number)" />
                <br /><b>Kod pocztowy: </b>
                <InputText id="postcode" @bind-Value="@ModelSellerOut.PostCode" />
                <ValidationMessage For="@(() => ModelSellerOut.PostCode)" />
                <br /><b>NIP: </b>
                @*<input id=nipinput @bind="@nip" />*@
                <InputText id="nipIT" @bind-Value="@ModelSellerOut.NIP" />
                <ValidationMessage For="@(() => ModelSellerOut.NIP)" />
                <button class="btn btn-primary" type="submit" @onclick="SearchByNip">Click me</button>

            </EditForm>
        </div>

    }
    else
    {
<div id="sellerInfo">
    <EditForm Model="@ModelSellerOut">

        <div class="alert @StatusClass">@StatusMessage</div>

        <DataAnnotationsValidator />


        <b>Nazwa firmy: </b>
        <label>
            Wybierz firmę:<br />
            <input type="text" name="seller" list="sellers" @onchange="SelectedSellerChanged" value="@ModelSellerOut.Name"/>
            <datalist id="sellers">

                <label>
                    or select one from the list:
                    <select name="sellers">
                        @foreach (Seller item in Sellers)
                        {
                            <option value="@item.Name" data-id="@item.ID" />
                        }
                    </select>
                </label>

            </datalist>

        </label>

        <br /><b>Ulica: </b>
        <InputText id="street" @bind-Value="@ModelSellerOut.Street" />
        <ValidationMessage For="@(() => ModelSellerOut.Street)" />
        <br /><b>Numer: </b>
        <InputText id="number" @bind-Value="@ModelSellerOut.Number" />
        <ValidationMessage For="@(() => ModelSellerOut.Number)" />
        <br /><b>Kod pocztowy: </b>
        <InputText id="postcode" @bind-Value="@ModelSellerOut.PostCode" />
        <ValidationMessage For="@(() => ModelSellerOut.PostCode)" />
        <br /><b>NIP: </b>
        @*<input id=nipinput @bind="@nip" />*@
        <InputText id="nipIT" @bind-Value="@ModelSellerOut.NIP" />
        <ValidationMessage For="@(() => ModelSellerOut.NIP)" />
        <button class="btn btn-primary" type="submit" @onclick="SearchByNip">Click me</button>

    </EditForm>
</div>



    }

    <div id="productsDIV">
        <EditForm Model="@ModelProductBuy" OnValidSubmit="CreateInvoice" >

            <div class="alert @StatusClass">@StatusMessage</div>

            <DataAnnotationsValidator/>

            <div id="categorySelect">

                <select name="categories" @onchange="SelectedCategoryChanged">
                    <option value="-1">-----</option>
                    @foreach (Category item in Categories)
                    {
                        <option value="@item.Name">@item.Name</option>
                    }
                </select>

            </div>
            <div id="a">
                <label>
                    Wybierz produkt:<br />
                    <input type="text" name="aa" list="products" @bind="@selectedProduct" autocomplete="off" />
                    <datalist id="products">

                        <label>
                            or select one from he list:
                            <select name="aa">
                                @foreach (Product item in Products)
                                {
                                    <option value="@item.Name" data-id="@item.ID" />
                                }
                            </select>
                        </label>

                    </datalist>

                </label>

            </div>

            <br />
            <b>Ilość: </b> <InputNumber id="amountIn" @bind-Value="@ModelProductBuy.Amount" />
            <ValidationMessage For="@(() => ModelProductBuy.Amount)" />
            <b> Cena netto:</b> <InputNumber id="priceNettoIn" @bind-Value="@ModelProductBuy.PricePerItemNetto" />
            <ValidationMessage For="@(() => ModelProductBuy.PricePerItemNetto)" />
            
            @*<button class="btn btn-primary" @onclick="AddProductSell">Dodaj</button>*@
            <input type="button" @onclick="@(()=>AddProductSell())" value="Dodaj"/>

            <table width="">
                <thead>
                    <tr>
                        <th>Nazwa</th>
                        <th>Ilość</th>
                        <th>J.M</th>
                        <th>Cena</th>
                        <th>Suma</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (ProductBuyOut item in ProductsBuy)
                    {
                        <tr>
                            <th>@ProductsOnList.Where(p=>p.ID == item.ProductID).First().Name</th>
                            <th>@item.Amount</th>
                            <th>@GetUnitName(item.UnitID)</th>
                            <th>@item.PricePerItemNetto.ToString("N2") zł</th>
                            <th>@((item.PricePerItemNetto * item.Amount).ToString("N2")) zł</th>
                            <th><button type="button" class="bg-warning" @onclick="@(()=>DeleteProductSell(item))">Usuń</button></th>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th><b>Łącznie</b></th>
                        <th><b>@(ProductsBuy.Sum(s => s.PricePerItemNetto * s.Amount).ToString("N2")) zł</b></th>
                    </tr>
                </tfoot>
            </table>
            <input type="submit" value="Stwórz"/>
        </EditForm>
    </div>
        @*<button type="submit" @onclick="CreateInvoice">Stwórz</button>*@
       

</div>
}


    @code {
        private string StatusMessage;
        private string StatusClass;


        protected void HandleValidSubmit()
        {
            StatusClass = "alert-info";
            StatusMessage = DateTime.Now + " Handle valid submit";
        }

        protected void HandleInvalidSubmit()
        {
            StatusClass = "alert-danger";
            StatusMessage = DateTime.Now + " Handle invalid submit";
        }



        private List<Seller> Sellers { get; set; }
        private List<Unit> Units { get; set; }
        private List<Category> Categories { get; set; }
        private List<Product> Products { get; set; }
        private List<ProductBuyOut> ProductsBuy { get; set; }
        private List<ProductOnList> ProductsOnList { get; set; }

        private string selectedProduct { get; set; }
        private string nip { get; set; }// = "8211022391";
        private string a { get; set; }


        private Seller seller { get; set; }
        private Category category { get; set; }
        private Product product { get; set; }
        private Unit unit { get; set; }

        private SellerOut ModelSellerOut = new SellerOut();
        private ProductBuy ModelProductBuy = new ProductBuy();

        private int amount { get; set; }
        private double priceNetto { get; set; }
        private int SelectedOption { get; set; }
        

        const string _URL = "https://localhost:5001/api/";

        protected override async Task OnInitializedAsync()
        {
            Sellers = await Http.GetJsonAsync<List<Seller>>(_URL + Controller.Sellers);
            Units = await Http.GetJsonAsync<List<Unit>>(_URL + Controller.units);
            Categories = await Http.GetJsonAsync<List<Category>>(_URL + Controller.categories);
            seller = new Seller();
            ModelSellerOut = new SellerOut();
            Products = new List<Product>();
            ProductsBuy = new List<ProductBuyOut>();
            ProductsOnList = new List<ProductOnList>();
            a = "";
            nip = string.Empty;
            selectedProduct = string.Empty;
        }

        async Task SelectedSellerChanged(ChangeEventArgs e)
        {
            if(Sellers.Any(c => c.Name == e.Value.ToString()))
            {
                seller = Sellers.Where(c => c.Name == e.Value.ToString()).First();
                //Seller = Sellers.Where(c => c.Name == ModelSellerOut.Name).First();
                nip = seller.NIP;
                ModelSellerOut.Name = seller.Name;
                //e.Value = Seller.Name;
                ModelSellerOut.Street = seller.Street;
                ModelSellerOut.City = seller.City;
                ModelSellerOut.Number = seller.Number;
                ModelSellerOut.PostCode = seller.PostCode;
                ModelSellerOut.NIP = seller.NIP;
                //this.StateHasChanged();
            }
        }

        async Task SelectedCategoryChanged(ChangeEventArgs e)
        {
            if(Categories.Any(c => c.Name == e.Value.ToString()))
            {
                selectedProduct = string.Empty;
                category = Categories.Where(c => c.Name == e.Value.ToString()).First();



                Products = await Http.GetJsonAsync<List<Product>>(_URL + Controller.products + "/bycategoryid/" + category.ID.ToString());

                //selectedProduct = string.Empty;

                //this.StateHasChanged();
            }
        }

        async Task SelectedProductChanged(ChangeEventArgs e)
        {
            if((string)e.Value != "")
            {
                if(Products.Any(p=>p.Name == e.Value.ToString()))
                {
                    product = Products.Where(p => p.Name == e.Value.ToString()).First();
                    unit = Units.Where(u => u.ID == product.UnitID).First();
                    selectedProduct = product.Name;
                }
            }
        }

        async Task SearchByNip(KeyboardEventArgs e)
        {
            if (ModelSellerOut.NIP.Length > 9)
            {
                string temp = ModelSellerOut.NIP.Replace("-", "");
                seller = await Http.GetJsonAsync<Seller>("https://localhost:5001/api/gus/" + temp);
                //this.StateHasChanged();
            }
        }

        async Task SearchByNip()
        {
            if (ModelSellerOut.NIP.Length > 9)
            {
                string temp = a.Replace("-", "");
                nip = ModelSellerOut.NIP;
                //ModelSellerOut = new SellerOut();
                //Seller = new Seller();
                seller = await Http.GetJsonAsync<Seller>("https://localhost:5001/api/gus/" + nip);
                ModelSellerOut.Name = seller.Name;
                ModelSellerOut.Street = seller.Street;
                ModelSellerOut.City = seller.City;
                ModelSellerOut.Number = seller.Number;
                ModelSellerOut.PostCode = seller.PostCode;
                ModelSellerOut.NIP = seller.NIP;
                //this.StateHasChanged();
            }
        }

        async Task AddProductSell()
        {
            //if(selectedProduct != string.Empty)
            {
                if(ModelProductBuy.Amount != 0 && ModelProductBuy.PricePerItemNetto !=0)
                {
                    ProductBuyOut temp = new ProductBuyOut();
                    if (Products.Where(p => p.Name == selectedProduct).FirstOrDefault() == null)
                    {
                        ProductOut newProduct = new ProductOut
                        {
                            Name = selectedProduct,
                            Amount = (int)ModelProductBuy.Amount,
                            CategoryID = (Guid)category.ID,
                            //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                            UnitID = new Guid("60298bb9-efd7-46ce-1d6f-08d73179e980"),
                            //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                            PriceNetto = (double)ModelProductBuy.PricePerItemNetto,
                            Description = "",
                            //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                            TaxStageID = new Guid("ba78d24d-fef4-4b96-716f-08d7317c8e05")
                            //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                        };
                        Product tempProduct = await Http.PostJsonAsync<Product>(_URL + Controller.products, newProduct);
                        temp.ProductID = tempProduct.ID;
                        temp.Name = selectedProduct;
                        temp.TaxStageID = tempProduct.TaxStageID;
                        temp.Amount = tempProduct.Amount;
                        temp.Unit = "TEST";
                        temp.PricePerItemNetto = tempProduct.PriceNetto;
                        var tempTaxStage = await Http.GetJsonAsync<TaxStage>(_URL + Controller.taxstages + "/" + tempProduct.TaxStageID.ToString());
                        temp.PricePerItemBrutto = tempProduct.PriceNetto * ((tempTaxStage.Stage + 100.0) / 100.0);
                        product = tempProduct;
                    }

                    else
                    {
                        product = Products.Where(p => p.Name == selectedProduct).First();
                        unit = Units.Where(u => u.ID == product.UnitID).First();

                        temp.ProductID = product.ID;
                        temp.Amount = ModelProductBuy.Amount;
                        temp.PricePerItemNetto = ModelProductBuy.PricePerItemNetto;
                        temp.TaxStageID = product.TaxStageID;
                        temp.UnitID = product.UnitID;


                        //this.StateHasChanged();
                    }
                    ProductsOnList.Add(new ProductOnList { ID = product.ID, Name = product.Name });
                    ProductsBuy.Add(temp);
                    selectedProduct = string.Empty;
                }
            }
        }

        void DeleteProductSell(ProductBuyOut x)
        {
            ProductsOnList.Remove(ProductsOnList.Where(p => p.ID == x.ProductID).First());
            ProductsBuy.Remove(x);
            //this.StateHasChanged();
        }

        async Task<string> GetUnit(Guid id)
        {
            Unit temp = await Http.GetJsonAsync<Unit>(_URL + Controller.units + "/byproductid/" + id.ToString());
            return temp.Name;
        }

        string GetUnitName(Guid id)
        {
            foreach (Unit item in Units)
            {
                if (item.ID == id) return item.Name;
            }
            return "BŁĄD";
        }

        async Task CreateInvoice()
        {
            if(ModelSellerOut != null && ModelProductBuy != null && ProductsBuy.Count > 0 && ProductsOnList.Count > 0)
            {
                InvoiceBuyOut temp = new InvoiceBuyOut();
                if (Sellers.Any(c => c.NIP == ModelSellerOut.NIP)) temp.SellerID = Sellers.Where(c => c.NIP == ModelSellerOut.NIP).First().ID;
                else
                {
                    Seller SellerTemp = await Http.PostJsonAsync<Seller>(_URL + Controller.Sellers, ModelSellerOut);
                    temp.SellerID = SellerTemp.ID;
                }
                temp.IsPaid = false;
                temp.PaymentDeadline = DateTime.Now;
                temp.PriceNetto = ProductsBuy.Sum(p => p.Amount * p.PricePerItemNetto);
                temp.ProductsBuy = ProductsBuy;

                InvoiceBuy response = await Http.PostJsonAsync<InvoiceBuy>(_URL + Controller.invoicebuys, temp);
            }
        }

        



        public enum Controller
        {
            categories,
            Sellers,
            products,
            invoicesells,
            invoicebuys,
            units,
            taxstages
        }

    }
