@page "/newinvoicesell"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@using Models
@using Models.Out
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Newtonsoft.Json
@inject Blazored.LocalStorage.ILocalStorageService _localStorage


<h3>Nowa faktura sprzedaży</h3>

@if (Units == null || Clients == null || Categories == null)
{
    <h2>Ładowanie strony...</h2>
}
else
{
    if (responseInvoice != null)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Wprowadzono pomyślnie!</h3>
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <h3> Faktura została wprowadzona pomyślnie. </h3><br />
                        <button type="button" @onclick="@(() => ToInvoice(responseInvoice.ID))">Wyświetl fakturę</button>
                        <button class="btn btn-primary"
                                @onclick="ClosePopup">
                            Ok
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    if (ShowNewProduct == true)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content"  style="background-color:lightgray;">
                    <div class="modal-header">
                        <h3 class="modal-title">Nowa pozycja</h3>
                        <button type="button" class="close"
                                @onclick="(()=>ShowNewProduct = false)">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div id="productsDIV">
                            <div class="alert @StatusClass">@StatusMessage</div>
                            <div id="categorySelect">
                                <div>
                                    Kategoria:
                                    <select name="categories" style="display:inline;" @onchange="SelectedCategoryChanged">
                                        <option value="-1">-----</option>
                                        @foreach (Category item in Categories)
                                        {
                                            <option value="@item.Name">@item.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>

                        <table border="1" style="width:100%">
                            <col style="width:25%">
                            <col style="width:50%">
                            <col style="width:25%">
                            <tr>
                                <td>Nazwa produktu</td>
                                <td>
                                    <div id="a">
                                        <label class="contact">
                                            <input class="contact" type="text" name="aa" style="width:100%" list="products" @onchange="SelectedProductChanged" autocomplete="off" />
                                            <datalist id="products">
                                                <label>
                                                    or select one from he list:
                                                    <select name="aa">
                                                        @foreach (Product item in Products)
                                                        {
                                                            <option value="@item.Name" data-id="@item.ID" />
                                                        }
                                                    </select>
                                                </label>
                                            </datalist>
                                        </label>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>Ilość</td>
                                <td><input class="contact" type="number" min="0" @bind="ModelProductSell.Amount" /></td>
                                <td>
                                    @if (selectedProduct != "" && product != null)
                                    {
                                        <label style="font-size:14px">Na stanie: @product.Amount @unit.Name</label>
                                    }
                                    else
                                    {

                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>Cena netto</td>
                                <td><input class="contact" type="number" min="0" @bind="ModelProductSell.PricePerItemNetto" /></td>
                            </tr>
                            <tr>
                                <td>Marża %</td>
                                <td><input class="contact" type="number" id="marginIn" @bind="Margin2" /></td>
                            </tr>
                        </table>
                        <br />
                        <input type="button" @onclick="@(()=>AddProductSell())" value="Dodaj" />
                    </div>
                </div>
            </div>
        </div>
    }

    <div id="main">
        <form @onsubmit="CreateInvoice">
            <div id="clientInfo" class="row">
                <div class="col-6">
                    <table class="contact">
                        <col style="width:35%">
                        <col style="width:65%">
                        <tr>
                            <td>Nazwa firmy: </td>
                            <td>
                                @if (Clients.Count == 0)
                                {
                                    <input class="contact" type="text" @bind-value="client.Name" @bind-value:event="SelectedClientChanged" required />
                                }
                                else
                                {
                                    <label class="contact">
                                        <input class="contact" type="text" name="client" list="clients" @onchange="SelectedClientChanged" value="@ModelClientOut.Name" required/>
                                        <datalist id="clients">
                                            <label>
                                                or select one from the list:
                                                <select name="clients">
                                                    @foreach (Client item in Clients)
                                                    {
                                                        <option value="@item.Name" data-id="@item.ID" />
                                                    }
                                                </select>
                                            </label>
                                        </datalist>
                                    </label>
                                }
                            </td>
                        </tr>
                        <tr>
                            <td>Ulica </td>
                            <td><input type="text" class="contact" id="street" @bind="@ModelClientOut.Street" required /></td>
                        </tr>
                        <tr>
                            <td>Numer </td>
                            <td><input type="text" class="contact" id="number" @bind="@ModelClientOut.Number" required /></td>
                        </tr>
                        <tr>
                            <td>Kod pocztowy </td>
                            <td><input type="text" class="contact" id="postcode" @bind="@ModelClientOut.PostCode" required /></td>
                        </tr>
                        <tr>
                            <td>Miejscowość </td>
                            <td><input type="text" class="contact" id="city" @bind="@ModelClientOut.City" required /></td>
                        </tr>
                        <tr>
                            <td>NIP </td>
                            <td><input type="text" class="contact" id="nipIT" @bind="@ModelClientOut.NIP" required style="width:67%;" /><button class="btn btn-primary" type="submit" @onclick="SearchByNip" style="font-size:10px">Szukaj po NIP</button></td>
                        </tr>
                    </table>

                </div>
                <div class="col-6">
                    <table style="width:60%">
                        <col style="width:30%">
                        <col style="width:67%">
                        <tr>
                            <td>Rodzaj płatności</td>
                            <td>
                                <label class="contact">
                                    <input type="text" name="pmethods" list="pmethods" @onchange="SelectedPaymentMethodChanged" value="@paymentMethod" required/>
                                    <datalist id="pmethods">
                                        <label>
                                            or select one from the list:
                                            <select name="pmethods">
                                                @foreach (PaymentMethod item in PaymentMethods)
                                                {
                                                    <option value="@item.Name" data-id="@item.ID" />
                                                }
                                            </select>
                                        </label>
                                    </datalist>
                                </label>
                            </td>
                        </tr>
                        <tr>
                            <td>Termin płatności</td>
                            <td><input style="display:inline-block" type="date" min="@DateTime.Now" @bind="paymentDeadline" required/><br /></td>
                        </tr>
                        <tr>
                            <td>Zapłacona?</td>
                            <td>
                                <select @onchange="IsPaidChanged" style="display:inline-block">
                                    <option value="NIE">NIE</option>
                                    <option value="TAK">TAK</option>
                                </select>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>

            

            <br />
            <br />
            <button type="button" @onclick="(()=>ShowNewProduct=true)" class="btn btn-success">Nowa pozycja</button>
            

            <br /><br />
            <table width="100%">
                <col style="width:34%">
                <col style="width:5%">
                <col style="width:7%">
                <col style="width:5%">
                <col style="width:10%">
                <col style="width:10%">
                <col style="width:12%">
                <col style="width:12%">
                <col style="width:5%" />
                <thead>
                    <tr>
                        <th>Nazwa</th>
                        <th>Ilość</th>
                        <th>J.M</th>
                        <th>Vat</th>
                        <th>Cena netto</th>
                        <th>Cena brutto</th>
                        <th>Wartość netto</th>
                        <th>Wartość brutto</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ProductsSell)
                    {
                        <tr>
                            <th>@ProductsOnList.Where(p => p.ID == item.ProductID).First().Name</th>
                            <th>@item.Amount</th>
                            <th>@item.Unit</th>
                            <th>@(TaxStages.Where(t => t.ID == item.TaxStageID).First().Stage)%</th>
                            <th>@item.PricePerItemNetto.ToString("N2") zł</th>
                            <th>@item.PricePerItemBrutto.ToString("N2") zł</th>
                            <th>@((item.PricePerItemNetto * item.Amount).ToString("N2")) zł</th>
                            <th>@((item.PricePerItemBrutto * item.Amount).ToString("N2")) zł</th>
                            <th><button type="button" class="bg-warning" @onclick="@(()=>DeleteProductSell(item))">Usuń</button></th>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th><b>Łącznie netto</b></th>
                        <th><b>@(ProductsSell.Sum(s => s.PricePerItemNetto * s.Amount).ToString("N2")) zł</b></th>
                    </tr>
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th><b>Łącznie brutto</b></th>
                        <th><b>@(ProductsSell.Sum(s => s.PricePerItemBrutto * s.Amount).ToString("N2")) zł</b></th>
                    </tr>
                </tfoot>
            </table>
            <input type="submit" value="Stwórz" />
        </form>
    </div>
}


@code {
    private string StatusMessage;
    private string StatusClass;


    protected void HandleValidSubmit()
    {
        StatusClass = "alert-info";
        StatusMessage = DateTime.Now + " Handle valid submit";
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        StatusMessage = DateTime.Now + " Handle invalid submit";
    }

    private List<Client> Clients { get; set; }
    private List<Unit> Units { get; set; }
    private List<TaxStage> TaxStages { get; set; }
    private List<Category> Categories { get; set; }
    private List<Product> Products { get; set; }
    private List<ProductSellOut> ProductsSell { get; set; }
    private List<ProductOnList> ProductsOnList { get; set; }
    private List<PaymentMethod> PaymentMethods { get; set; }

    private string selectedProduct { get; set; }
    private string nip { get; set; }
    private string a { get; set; }
    private bool ShowResponseModal { get; set; } = false;
    private bool ShowCloseModal { get; set; } = false;
    private bool ShowNewPaymentMethodModal { get; set; } = false;
    private bool ShowNewProduct { get; set; }
    private string IsPaid { get; set; }
    private string paymentMethod { get; set; }


    private Client client { get; set; }
    private Category category { get; set; }
    private Product product { get; set; }
    private Unit unit { get; set; }
    private InvoiceSell responseInvoice { get; set; }
    private DateTime paymentDeadline { get; set; } = DateTime.Now;

    private ClientOut ModelClientOut = new ClientOut();
    private ProductSell ModelProductSell = new ProductSell();
    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }
    private int amount { get; set; }
    private double priceNetto { get; set; }
    private int SelectedOption { get; set; }
    private double Margin;
    public double Margin2
    {
        get { return Margin; }
        set
        {
            Margin = value;
            MarginChanged();
        }
    }
    public double PriceNetto2
    {
        get { return ModelProductSell.PricePerItemNetto; }
        set
        {
            ModelProductSell.PricePerItemNetto = value;
            PriceChanged();
        }
    }

    const string _URL = "https://localhost:5001/api/";

    protected override async Task OnInitializedAsync()
    {
        Clients = await Http.GetJsonAsync<List<Client>>(_URL + Controller.clients);
        var user = (await authenticationStateTask).User;
        var savedToken = await _localStorage.GetItemAsync<string>("authToken");
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", savedToken);
        var unitsResult = await Http.GetAsync(_URL + Controller.units);
        if (unitsResult.IsSuccessStatusCode)
            Units = JsonConvert.DeserializeObject<List<Unit>>(await unitsResult.Content.ReadAsStringAsync());
        else NavigationManager.NavigateTo("/Identity/Account/Login");
        //await Http.GetJsonAsync<List<Unit>>(_URL + Controller.units);
        TaxStages = await Http.GetJsonAsync<List<TaxStage>>(_URL + Controller.taxstages);
        Categories = await Http.GetJsonAsync<List<Category>>(_URL + Controller.categories);
        PaymentMethods = await Http.GetJsonAsync<List<PaymentMethod>>(_URL + Controller.payment);
        client = new Client();
        ModelClientOut = new ClientOut();
        Products = new List<Product>();
        ProductsSell = new List<ProductSellOut>();
        ProductsOnList = new List<ProductOnList>();
        a = "";
        nip = string.Empty;
        selectedProduct = string.Empty;
    }

    async Task SelectedClientChanged(ChangeEventArgs e)
    {
        if (Clients.Any(c => c.Name == e.Value.ToString()))
        {
            client = Clients.Where(c => c.Name == e.Value.ToString()).First();
            nip = client.NIP;
            ModelClientOut.Name = client.Name;
            ModelClientOut.Street = client.Street;
            ModelClientOut.City = client.City;
            ModelClientOut.Number = client.Number;
            ModelClientOut.PostCode = client.PostCode;
            ModelClientOut.NIP = client.NIP;
        }
    }

    async Task SelectedCategoryChanged(ChangeEventArgs e)
    {
        if (Categories.Any(c => c.Name == e.Value.ToString()))
        {
            selectedProduct = string.Empty;
            category = Categories.Where(c => c.Name == e.Value.ToString()).First();
            Products = await Http.GetJsonAsync<List<Product>>(_URL + Controller.products + "/bycategoryid/" + category.ID.ToString());
        }
    }

    async Task SelectedProductChanged(ChangeEventArgs e)
    {
        if ((string)e.Value != "")
        {
            if (Products.Any(p => p.Name == e.Value.ToString()))
            {
                product = Products.Where(p => p.Name == e.Value.ToString()).First();
                unit = Units.Where(u => u.ID == product.UnitID).First();
                selectedProduct = product.Name;
            }
            /*else
            {
                selectedProduct = "";
                product = null;
                unit = null;
            }*/
        }
        /*else
        {
            selectedProduct = "";
            product = null;
            unit = null;
        }*/
    }

    async Task SearchByNip(KeyboardEventArgs e)
    {
        if (ModelClientOut.NIP.Length > 9)
        {
            string temp = ModelClientOut.NIP.Replace("-", "");
            client = await Http.GetJsonAsync<Client>("https://localhost:5001/api/gus/" + temp);
        }
    }

    async Task SearchByNip()
    {
        if (ModelClientOut.NIP.Length > 9)
        {
            string temp = a.Replace("-", "");
            nip = ModelClientOut.NIP;
            client = await Http.GetJsonAsync<Client>("https://localhost:5001/api/gus/" + nip);
            ModelClientOut.Name = client.Name;
            ModelClientOut.Street = client.Street;
            ModelClientOut.City = client.City;
            ModelClientOut.Number = client.Number;
            ModelClientOut.PostCode = client.PostCode;
            ModelClientOut.NIP = client.NIP;
        }
    }

    async Task AddProductSell()
    {
        if (selectedProduct != string.Empty)
        {
            if (ModelProductSell.Amount != 0 && ModelProductSell.PricePerItemNetto != 0)
            {
                product = Products.Where(p => p.Name == selectedProduct).First();
                unit = Units.Where(u => u.ID == product.UnitID).First();
                var taxstage = TaxStages.Where(t => t.ID == product.TaxStageID).First().Stage;
                ProductSellOut temp = new ProductSellOut();
                temp.ProductID = product.ID;
                temp.Name = product.Name;
                temp.Amount = ModelProductSell.Amount;
                temp.PricePerItemNetto = ModelProductSell.PricePerItemNetto;
                temp.PricePerItemBrutto = ModelProductSell.PricePerItemNetto * ((100.0 + taxstage) / 100.0);
                temp.TaxStageID = product.TaxStageID;
                temp.UnitID = product.UnitID;
                temp.Unit = GetUnitName(temp.UnitID);
                temp.BasePriceNetto = product.PriceNetto;

                ProductsOnList.Add(new ProductOnList { ID = product.ID, Name = product.Name });
                ProductsSell.Add(temp);
                selectedProduct = string.Empty;
                ModelProductSell.PricePerItemNetto = 0.0;
                Margin = 0;
                ModelProductSell.Amount = 0;
                //this.StateHasChanged();
                ShowNewProduct = false;
            }
        }
    }

    void DeleteProductSell(ProductSellOut x)
    {
        ProductsOnList.Remove(ProductsOnList.Where(p => p.ID == x.ProductID).First());
        ProductsSell.Remove(x);
    }

    async Task<string> GetUnit(Guid id)
    {
        Unit temp = await Http.GetJsonAsync<Unit>(_URL + Controller.units + "/byproductid/" + id.ToString());
        return temp.Name;
    }

    string GetUnitName(Guid id)
    {
        return Units.Where(u => u.ID == id).First().Name;
    }

    async Task CreateInvoice()
    {
        if (ModelClientOut != null && ModelProductSell != null && ProductsSell.Count > 0)
        {
            InvoiceSellOut temp = new InvoiceSellOut();
            if (Clients.Any(c => c.NIP == ModelClientOut.NIP)) temp.ClientId = Clients.Where(c => c.NIP == ModelClientOut.NIP).First().ID;
            else
            {
                Client clientTemp = await Http.PostJsonAsync<Client>(_URL + Controller.clients, ModelClientOut);
                temp.ClientId = clientTemp.ID;
            }
            PaymentMethod payment = new PaymentMethod();
                if (paymentMethod != "")
                {
                    payment = PaymentMethods.Where(u => u.Name == paymentMethod).FirstOrDefault();
                    if (payment == null)
                    {
                        payment = await Http.PostJsonAsync<PaymentMethod>(_URL + Controller.payment, new PaymentMethodOut { Name = paymentMethod });
                        temp.PaymentMethodID = payment.ID;
                        PaymentMethods.Add(payment);
                    }
                    else
                    {
                        temp.PaymentMethodID = payment.ID;
                    }
                }
            if (IsPaid == "TAK") temp.IsPaid = true;
            else temp.IsPaid = false;
            temp.PaymentDeadline = paymentDeadline.AddHours(23).AddMinutes(59);
            temp.PriceNetto = ProductsSell.Sum(p => p.Amount * p.PricePerItemNetto);
            temp.PriceBrutto = ProductsSell.Sum(p => p.Amount * p.PricePerItemBrutto);
            temp.ProductsSell = ProductsSell;
            temp.PriceBrutto = 0.0;
            foreach (var item in ProductsSell)
            {
                temp.PriceBrutto += item.PricePerItemBrutto * item.Amount;
            }
            responseInvoice = await Http.PostJsonAsync<InvoiceSell>(_URL + Controller.invoicesells, temp);
            ShowResponseModal = true;
        }
    }

    void MarginChanged()
    {
        var temp = Products.Where(p => p.Name == selectedProduct).FirstOrDefault();
        if (temp != null)
            ModelProductSell.PricePerItemNetto = Math.Round(temp.PriceNetto * ((Margin + 100.0) / 100.0), 2);
    }

    void PriceChanged()
    {
        var temp = Products.Where(p => p.Name == selectedProduct).FirstOrDefault();
        if (temp != null)
            Margin = Math.Round(((ModelProductSell.PricePerItemNetto / temp.PriceNetto) * 100.0) - 100.0, 1);
    }

    void ClosePopup()
    {
        ShowResponseModal = false;
        NavigationManager.NavigateTo("/newinvoicesell", true);
    }

    async Task IsPaidChanged(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "NIE")
        {
            IsPaid = "NIE";
        }
        else
        {
            IsPaid = "TAK";
        }
    }

    async Task SelectedPaymentMethodChanged(ChangeEventArgs e)
        {
            paymentMethod = e.Value.ToString();
        }

    void ToInvoice(Guid id)
    {
        ShowResponseModal = false;
        NavigationManager.NavigateTo("/invoiceselldetails/" + id.ToString());
    }
}
