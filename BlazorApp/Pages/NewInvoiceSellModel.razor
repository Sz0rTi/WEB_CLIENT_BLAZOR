@page "/newinvoicesell"
@using Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<h3>NewInvoiceSellModel</h3>

@if (Units == null || Clients == null || Categories == null)
{
    <h2>Loading...</h2>
}
else
{


    @if (client == null)
    {
        <b>Nazwa firmy: </b>
        <label>
            Wybierz firmę:<br />
            <input type="text" name="client" list="clients" @onchange="SelectedClientChanged" />
            <datalist id="clients">

                <label>
                    or select one from the list:
                    <select name="clients">
                        @foreach (Client item in Clients)
                        {
                            <option value="@item.Name" data-id="@item.ID" />
                        }
                    </select>
                </label>

            </datalist>

        </label>

        <br /><b>Ulica: </b>
        <input type="text" value="" />
        <br /><b>Numer: </b>
        <input type="text" value="" />
        <br /><b>Kod pocztowy: </b>
        <input type="text" value="" />
        <br /><b>NIP: </b>
        <input id=nipinput @bind="@nip" />
        @*@<input type="button" onclick="@SearchByNip(@nip)" value="STRZAŁ" />*@
        @*@<button type="button" @onclick="@(e=>SearchByNip(nip))" value="PEW" />*@
        <button class="btn btn-primary" @onclick="SearchByNip">Click me</button>
    }
    else
    {
        <b>Nazwa firmy: </b>
        <label>
            Wybierz firmę:<br />
            <input type="text" name="client" list="clients" @onchange="SelectedClientChanged" value="@client.Name" />
            <datalist id="clients">

                <label>
                    or select one from the list:
                    <select name="clients">
                        @foreach (Client item in Clients)
                        {
                            <option value="@item.Name" data-id="@item.ID" />
                        }
                    </select>
                </label>

            </datalist>

        </label>

        <br /><b>Ulica: </b>
        <input type="text" value="@client.Street" />
        <br /><b>Numer: </b>
        <input type="text" value="@client.Number" />
        <br /><b>Kod pocztowy: </b>
        <input type="text" value="@client.PostCode" />
        <br /><b>NIP: </b>
        <input id="nipInput" type="text" @bind="@nip" />
        <button class="btn btn-primary" @onclick="SearchByNip">Click me</button>
    }




}

@code {
    private List<Client> Clients { get; set; }
    private List<Unit> Units { get; set; }
    private List<Category> Categories { get; set; }
    private List<Product> Products { get; set; }
    private string nip { get; set; }// = "8211022391";
    private string a { get; set; }
    private Client client { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Clients = await Http.GetJsonAsync<List<Client>>("https://localhost:5001/api/clients");
        Units = await Http.GetJsonAsync<List<Unit>>("https://localhost:5001/api/units");
        Categories = await Http.GetJsonAsync<List<Category>>("https://localhost:5001/api/categories");
        a = "";
        nip = string.Empty;
        //SelectedOption = "-1";
    }

    async Task SelectedClientChanged(ChangeEventArgs e)
    {
        client = Clients.Where(c => c.Name == e.Value.ToString()).First();
        nip = client.NIP;
        this.StateHasChanged();
    }

    async Task SearchByNip(KeyboardEventArgs e)
    {
        if (nip.Length > 9)
        {
            string temp = nip.Replace("-", "");
            client = await Http.GetJsonAsync<Client>("https://localhost:5001/api/gus/" + temp);
            //this.StateHasChanged();
        }
    }

    async Task SearchByNip()
    {
        if (nip.Length > 9)
        {
            string temp = a.Replace("-", "");
            client = await Http.GetJsonAsync<Client>("https://localhost:5001/api/gus/" + this.nip);
            this.StateHasChanged();
        }
    }

}
