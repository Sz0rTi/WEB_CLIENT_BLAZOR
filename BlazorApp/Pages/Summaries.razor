@page "/summaries"
@attribute [Authorize]
@using Models
@using Models.Out
@using System.Globalization
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService _localStorage

<h3>Zestawienia</h3>

@if (selectedMonth == null)
{
    <h2>Ładowanie strony...</h2>
}
else
{
    if (MinDate == null)
    {
        <h3>Brak zestawień!</h3>
    }
    else
    {
        <div>
            Wybierz rok:
            <select style="display:inline-block;" value="@selectedYear" @onchange="SelectedYearChanged">
                @for (int i = CurrentData.Year; i >= MinDate.Year; i--)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>
        <div>
            Wybierz miesiąc:
            <select style="display:inline-block;" value="@selectedMonth" @onchange="SelectedMonthChanged">

                @if (selectedYear == MinDate.Year && MinDate.Year != CurrentData.Year)
                {
                    for (int i = MinDate.Month; i <= 12; i++)
                    {
                        <option value="@i">@Months[i]</option>
                    }
                }
                else
                {
                    if (selectedYear == CurrentData.Year)
                    {
                        for (int i = 1; i <= CurrentData.Month; i++)
                        {
                            <option value="@i">@Months[i]</option>
                        }
                    }
                    else
                    {
                        for (int i = 1; i <= 12; i++)
                        {
                            <option value="@i">@Months[i]</option>
                        }
                    }
                }

            </select>
        </div>

        <table>
            <tr>
                <th>Okres</th>
                <th>Data wygenerowania</th>
                <th>Suma zakupów</th>
                <th>Suma sprzedaży</th>
                <th>Łączny zysk</th>
            </tr>
            @foreach (var item in SummariesList)
            {
                <tr>
                    <td><a href="summarydetails/@item.ID">@(CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(item.Month)) @item.Year</a></td>
                    <td>@item.Date</td>
                    <td>@item.SumBought.ToString("N2") zł</td>
                    <td>@item.SumSold.ToString("N2") zł</td>
                    <td>@item.SumEarned.ToString("N2") zł</td>
                </tr>
            }
        </table>
    }
}

@code {
    private List<Summary> SummariesList { get; set; } = new List<Summary>();
    private DateTime CurrentData { get; set; }
    private InvoicesDate MinDate { get; set; }
    const string _URL = "https://localhost:5001/api/";
    private int selectedYear { get; set; }
    private int selectedMonth { get; set; }
    private Dictionary<int, string> Months = new Dictionary<int, string>();
    private int pagesCount { get; set; }
    private int currentPage { get; set; } = 1;
    private int itemsPerPage { get; set; } = 5;

    protected override async Task OnInitializedAsync()
    {
        CurrentData = DateTime.Now;
        try
        {
            MinDate = await Http.GetJsonAsync<InvoicesDate>(_URL + Controller.summaries + "/min");
        }
        catch (Exception e)
        {
            MinDate = null;
        }
        Months.Add(1, "Styczeń");
        Months.Add(2, "Luty");
        Months.Add(3, "Marzec");
        Months.Add(4, "Kwiecień");
        Months.Add(5, "Maj");
        Months.Add(6, "Czerwiec");
        Months.Add(7, "Lipiec");
        Months.Add(8, "Sierpień");
        Months.Add(9, "Wrzesień");
        Months.Add(10, "Październik");
        Months.Add(11, "Listopad");
        Months.Add(12, "Grudzień");
        if (await _localStorage.ContainKeyAsync("selectedYearSummary"))
        {
            selectedYear = int.Parse(await _localStorage.GetItemAsync<string>("selectedYearSummary"));
            selectedMonth = int.Parse(await _localStorage.GetItemAsync<string>("selectedMonthSummary"));
        }
        else
        {
            selectedYear = CurrentData.Year;
            selectedMonth = CurrentData.Month;
        }
        SelectedYearChanged(new ChangeEventArgs { Value = selectedYear });
        SelectedMonthChanged(new ChangeEventArgs { Value = selectedMonth });
        base.StateHasChanged();
    }




    async void SelectedYearChanged(ChangeEventArgs e)
    {
        if (e.Value.ToString() != "0")
        {
            selectedYear = int.Parse(e.Value.ToString());
            await _localStorage.SetItemAsync("selectedYearSummary", selectedYear.ToString());
            if (selectedYear == MinDate.Year)
            {
                if (int.Parse(await _localStorage.GetItemAsync<string>("selectedMonthSummary")) > MinDate.Month)
                {
                    SelectedMonthChanged(new ChangeEventArgs { Value = await _localStorage.GetItemAsync<string>("selectedMonthSummary") });
                }
                else
                {
                    SelectedMonthChanged(new ChangeEventArgs { Value = MinDate.Month });
                }

            }
            else
            {
                SelectedMonthChanged(new ChangeEventArgs { Value = 1 });
            }
            base.StateHasChanged();
        }
    }

    async void SelectedMonthChanged(ChangeEventArgs e)
    {
        selectedMonth = int.Parse(e.Value.ToString());
        await _localStorage.SetItemAsync("selectedMonthSummary", selectedMonth.ToString());
        var temp = await Http.PostJsonAsync<List<Summary>>(_URL + Controller.summaries + "/list", new InvoicesDate { Year = selectedYear, Month = selectedMonth });
        if (temp.Count == 0)
        {
            SummariesList = new List<Summary>();
        }
        else
        {
            SummariesList = temp;
        }
        base.StateHasChanged();
    }
}
